pub fn parse_input<T, F>(s: &str, mut f: F) -> Vec<T>
    where F: FnMut(Vec<&str>) -> T
{
    s.split("\n")
        .map(|line| line.trim())
        .filter(|line| !line.is_empty())
        .map(|line| line.split_whitespace().collect())
        .map(|parts| f(parts))
        .collect()
}

pub fn parse_u32s(s: &str) -> Vec<u32> {
    parse_input(s, |parts| parts[0].parse::<u32>().unwrap())
}

pub fn get_depths() -> Vec<u32> {
    parse_u32s(r"
118
121
123
125
134
132
137
135
136
137
138
139
163
170
171
159
161
162
156
155
151
168
172
166
159
180
187
172
161
162
161
183
182
185
175
173
174
177
192
191
190
219
225
226
216
226
230
234
236
244
235
245
266
299
300
281
291
309
303
333
332
309
312
313
314
315
339
351
353
352
338
343
337
346
338
335
332
329
345
347
332
339
354
373
376
397
400
401
433
434
440
434
438
443
448
452
456
450
459
463
464
488
492
488
506
507
516
523
524
522
546
551
553
554
553
562
559
567
569
556
557
577
581
582
591
593
594
595
598
602
611
623
604
613
603
607
612
616
612
613
612
598
607
622
619
636
638
639
637
659
657
677
678
679
655
651
655
654
662
666
672
673
676
683
684
693
688
691
698
702
704
706
707
710
709
725
731
729
767
779
780
807
806
808
815
812
811
819
820
821
822
826
812
810
820
817
803
808
826
831
837
842
839
840
827
838
840
841
842
848
841
838
839
838
839
841
821
812
813
796
817
820
845
854
857
858
866
869
870
881
882
888
889
891
886
891
901
930
940
944
943
958
952
916
903
905
907
910
915
907
906
907
919
921
923
925
924
929
931
936
937
935
953
962
968
980
981
1003
1005
1006
1011
1013
1014
1015
1016
1015
995
1002
1018
1020
1031
1043
1038
1039
1040
1041
1043
1037
1041
1050
1052
1048
1049
1050
1053
1057
1064
1067
1068
1078
1086
1098
1103
1119
1138
1114
1115
1129
1130
1143
1138
1141
1150
1153
1146
1155
1157
1145
1146
1147
1145
1144
1158
1163
1167
1171
1174
1176
1188
1207
1205
1208
1212
1216
1222
1231
1233
1249
1253
1269
1231
1235
1242
1241
1246
1247
1263
1266
1259
1260
1279
1280
1281
1285
1284
1285
1296
1300
1302
1319
1312
1313
1325
1342
1344
1361
1349
1363
1367
1366
1346
1347
1369
1385
1386
1397
1401
1402
1396
1397
1400
1395
1400
1411
1419
1427
1446
1445
1459
1460
1464
1472
1482
1474
1475
1476
1481
1484
1487
1494
1497
1494
1495
1498
1501
1511
1521
1528
1533
1535
1544
1518
1521
1509
1533
1537
1540
1545
1546
1544
1564
1553
1576
1577
1563
1560
1564
1569
1570
1571
1573
1576
1573
1596
1597
1593
1597
1596
1592
1597
1578
1555
1576
1584
1585
1584
1594
1598
1608
1613
1614
1606
1608
1621
1648
1614
1615
1606
1609
1610
1625
1638
1640
1617
1655
1661
1644
1648
1649
1653
1675
1674
1681
1679
1682
1683
1695
1696
1699
1700
1701
1704
1709
1729
1732
1739
1742
1746
1748
1746
1753
1744
1752
1749
1750
1758
1762
1767
1771
1772
1761
1763
1784
1804
1809
1792
1787
1806
1809
1815
1817
1828
1821
1824
1823
1824
1841
1840
1833
1840
1842
1863
1862
1865
1866
1868
1878
1887
1897
1905
1906
1913
1908
1915
1930
1928
1922
1925
1927
1928
1939
1938
1946
1947
1954
1955
1959
1961
1951
1945
1949
1954
1959
1961
1962
1964
1960
1956
1958
1975
1990
1994
2002
2004
2011
2010
2020
2042
2043
2046
2047
2044
2048
2065
2074
2075
2086
2088
2094
2098
2092
2083
2082
2084
2094
2097
2099
2098
2101
2104
2112
2118
2105
2108
2109
2104
2105
2103
2114
2144
2138
2139
2142
2114
2120
2139
2147
2153
2190
2191
2197
2193
2206
2216
2225
2230
2232
2258
2264
2236
2264
2289
2306
2307
2315
2319
2322
2277
2279
2271
2279
2285
2290
2297
2316
2317
2320
2329
2330
2323
2326
2327
2331
2336
2341
2348
2352
2386
2396
2401
2400
2401
2418
2419
2429
2432
2430
2428
2406
2401
2434
2435
2443
2463
2478
2479
2481
2482
2486
2490
2491
2492
2496
2497
2499
2507
2525
2522
2523
2522
2521
2526
2531
2530
2525
2526
2537
2533
2534
2542
2544
2531
2539
2546
2550
2551
2553
2554
2552
2562
2566
2551
2583
2587
2601
2605
2604
2610
2628
2639
2641
2654
2657
2676
2672
2686
2694
2677
2693
2694
2707
2696
2710
2753
2752
2722
2723
2724
2741
2746
2753
2763
2764
2805
2806
2810
2811
2823
2854
2855
2852
2872
2873
2867
2876
2881
2885
2899
2900
2901
2903
2918
2912
2924
2915
2920
2932
2942
2943
2934
2953
2960
2956
2957
2959
2982
2991
3016
3018
3047
3032
3048
3051
3056
3063
3064
3063
3065
3066
3070
3075
3069
3075
3073
3074
3083
3086
3097
3093
3082
3077
3098
3105
3128
3144
3148
3174
3173
3172
3171
3169
3176
3180
3166
3165
3182
3183
3206
3207
3208
3211
3215
3214
3220
3233
3234
3248
3249
3252
3253
3254
3256
3258
3266
3265
3266
3274
3291
3275
3291
3294
3299
3292
3293
3306
3292
3291
3290
3291
3295
3296
3288
3294
3305
3308
3315
3319
3327
3332
3334
3332
3342
3346
3347
3348
3360
3370
3371
3373
3379
3387
3386
3389
3393
3398
3405
3406
3413
3417
3431
3433
3434
3438
3442
3443
3445
3446
3447
3448
3454
3439
3450
3451
3453
3452
3455
3462
3466
3475
3479
3476
3479
3480
3484
3486
3489
3491
3505
3506
3510
3513
3530
3532
3537
3540
3542
3553
3558
3570
3569
3570
3569
3570
3565
3559
3561
3556
3557
3575
3585
3590
3592
3593
3602
3619
3623
3624
3669
3671
3672
3683
3686
3699
3708
3709
3714
3713
3718
3719
3742
3729
3730
3731
3729
3727
3741
3742
3741
3742
3734
3740
3744
3734
3737
3738
3739
3759
3760
3761
3750
3751
3753
3745
3744
3731
3733
3725
3750
3757
3767
3768
3774
3777
3791
3815
3816
3817
3819
3820
3825
3835
3836
3858
3861
3860
3844
3846
3847
3877
3906
3910
3912
3940
3941
3975
3980
3983
3987
4016
4028
4047
4066
4061
4058
4061
4066
4088
4089
4092
4098
4105
4110
4111
4103
4108
4082
4087
4086
4087
4082
4083
4084
4104
4110
4111
4119
4128
4133
4113
4129
4128
4129
4121
4123
4126
4132
4133
4143
4149
4148
4147
4145
4142
4143
4146
4138
4139
4141
4147
4148
4160
4156
4162
4173
4179
4181
4190
4191
4190
4191
4192
4193
4194
4208
4211
4215
4226
4223
4227
4230
4250
4248
4267
4260
4274
4275
4278
4291
4298
4304
4314
4315
4317
4319
4325
4326
4327
4349
4345
4356
4360
4365
4366
4370
4385
4384
4386
4399
4423
4397
4410
4409
4388
4393
4397
4402
4403
4418
4413
4418
4417
4418
4422
4411
4374
4403
4412
4427
4445
4449
4453
4458
4459
4465
4447
4448
4450
4460
4464
4465
4467
4472
4486
4484
4482
4507
4512
4525
4524
4525
4527
4522
4521
4524
4550
4551
4552
4550
4554
4555
4586
4578
4582
4594
4588
4592
4595
4598
4599
4614
4615
4623
4632
4633
4655
4661
4662
4690
4689
4690
4694
4704
4705
4694
4697
4702
4703
4704
4703
4709
4714
4722
4728
4741
4761
4767
4768
4770
4775
4778
4770
4788
4789
4802
4805
4808
4811
4819
4812
4813
4821
4838
4839
4843
4817
4821
4824
4820
4843
4845
4849
4852
4872
4873
4870
4885
4902
4920
4921
4923
4936
4930
4932
4933
4931
4949
4974
4976
4977
4978
4990
4991
5001
5002
5001
5027
5026
5021
5054
5055
5056
5059
5064
5065
5074
5081
5093
5095
5100
5113
5125
5126
5137
5142
5123
5118
5117
5118
5125
5135
5142
5154
5165
5158
5146
5148
5149
5163
5176
5177
5169
5171
5168
5186
5191
5196
5197
5224
5226
5224
5215
5213
5214
5198
5201
5202
5213
5214
5216
5251
5255
5259
5262
5259
5261
5264
5273
5281
5254
5265
5280
5289
5294
5298
5309
5310
5298
5297
5306
5311
5301
5306
5289
5287
5300
5299
5301
5308
5314
5323
5329
5330
5324
5325
5332
5335
5332
5333
5334
5337
5345
5351
5355
5364
5366
5382
5391
5408
5400
5402
5405
5390
5391
5394
5407
5409
5410
5411
5412
5416
5412
5424
5426
5425
5426
5434
5421
5433
5440
5441
5435
5424
5417
5413
5414
5415
5418
5420
5421
5444
5442
5433
5435
5436
5437
5407
5406
5424
5427
5433
5434
5438
5441
5443
5444
5445
5446
5453
5464
5465
5478
5474
5462
5463
5491
5498
5499
5500
5501
5504
5506
5530
5524
5517
5521
5530
5532
5538
5544
5541
5554
5556
5553
5554
5556
5562
5563
5568
5572
5584
5581
5584
5582
5586
5588
5599
5602
5603
5601
5610
5607
5602
5604
5600
5602
5605
5606
5608
5606
5610
5619
5620
5619
5623
5624
5626
5627
5628
5630
5637
5650
5674
5677
5661
5669
5675
5676
5681
5685
5687
5709
5713
5714
5724
5728
5729
5727
5741
5755
5741
5730
5724
5727
5726
5730
5731
5732
5734
5733
5734
5735
5736
5737
5736
5730
5732
5742
5744
5747
5755
5760
5755
5757
5768
5793
5798
5799
5805
5808
5810
5812
5814
5815
5817
5850
5851
5839
5860
5870
5871
5879
5886
5897
5904
5908
5907
5911
5910
5914
5916
5917
5919
5917
5928
5930
5931
5932
5941
5944
5946
5951
5931
5905
5930
5936
5937
5935
5936
5942
5944
5951
5916
5899
5892
5891
5902
5907
5951
5952
5957
5958
5961
5965
5969
5974
5975
5953
5956
5965
5985
5987
6017
6016
6017
5990
5991
5999
5993
5995
6016
6017
6014
6049
6042
6053
6055
6068
6069
6074
6072
6079
6074
6076
6066
6065
6067
6098
6104
6116
6115
6113
6099
6100
6101
6100
6111
6115
6140
6106
6107
6117
6131
6135
6144
6118
6113
6118
6128
6129
6135
6138
6143
6144
6142
6144
6145
6144
6147
6151
6149
6150
6151
6135
6136
6132
6118
6113
6120
6117
6118
6122
6125
6126
6124
6131
6132
6135
6136
6154
6160
6167
6179
6181
6186
6196
6225
6228
6232
6221
6238
6249
6252
6254
6256
6260
6269
6271
6263
6272
6271
6272
6271
6285
6308
6319
6327
6334
6337
6356
6385
6380
6387
6395
6396
6392
6395
6398
6400
6401
6396
6399
6400
6380
6379
6380
6377
6397
6398
6396
6415
6419
6438
6449
6465
6459
6461
6463
6466
6492
6493
6502
6501
6503
6510
6511
6512
6505
6506
6508
6525
6523
6530
6536
6535
6539
6544
6545
6534
6532
6537
6542
6543
6544
6545
6559
6560
6577
6578
6580
6581
6582
6591
6597
6581
6595
6608
6620
6624
6632
6636
6639
6637
6645
6648
6650
6651
6645
6648
6661
6658
6659
6668
6667
6666
6684
6700
6701
6730
6736
6746
6749
6750
6751
6741
6728
6729
6762
6763
6792
6795
6796
6813
6827
6835
6843
6844
6852
6854
6856
6868
6870
6876
6874
6865
6870
6867
6870
6877
6887
6881
6869
6871
6874
6875
6876
6902
6903
6901
6902
6912
6913
6912
6913
6927
6928
6935
6936
6942
6943
6942
6943
6953
6954
6961
6989
6992
6993
6997
7018
7022
7041
7052
7055
7058
7049
7050
7051
7047
7064
7059
7074
7082
7083
7097
7102
7092
7094
7101
7143
7165
7176
7178
7183
7180
7203
7204
7207
7211
7217
7220
7212
7215
7217
7223
7207
7214
7213
7215
7214
7212
7219
7226
7225
7230
7239
7240
7241
7248
7247
7254
7258
7262
7280
7298
7297
7307
7308
7316
7314
7339
7340
7359
7356
7383
7382
7385
7397
7399
7410
7437
7440
7439
7457
7455
7462
7463
7464
7465
7477
7478
7494
7500
7507
7512
7547
7558
7559
7571
7572
7575
7608
7633
7636
7629
7628
7633
7635
7641
7659
7663
7677
7694
7708
7701
7697
7682
7684
7675
7664
7672
7675
7669
7671
7672
7684
7688
7701
7712
7741
7727
7733
7735
7736
7737
7744
7748
7749
7750
7736
7737
7752
7755
7756
7757
7791
7790
7785
7791
7812
7825
7816
7819
7824
7829
7855
7846
7854
7827
7831
7835
7836
7845
7848
7861
7862
7864
7847
7858
7877
7878
7888
7885
7881
7878
7883
7884
7882
7883
7901
7916
7922
7909
7915
7929
7942
7953
7954
7951
7967
7963
")
}

pub fn parse_cmds(s: &str) -> Vec<(String, u32)> {
    parse_input(s, |parts| (parts[0].to_string(), parts[1].parse::<u32>().unwrap()))
}

pub fn get_cmds() -> Vec<(String, u32)> {
    parse_cmds(r"
forward 5
forward 2
forward 9
down 2
forward 9
forward 3
forward 2
down 6
forward 3
forward 3
down 3
down 3
forward 8
down 5
forward 7
forward 9
forward 9
forward 6
forward 9
forward 3
forward 3
forward 1
forward 7
down 6
forward 7
forward 4
down 3
down 1
forward 4
down 7
down 2
down 8
forward 9
down 5
down 2
forward 6
up 4
down 3
down 1
down 6
down 7
forward 6
up 2
forward 2
down 9
down 3
forward 7
up 3
up 7
forward 8
forward 7
down 4
up 8
up 1
forward 4
down 6
forward 9
forward 3
down 1
down 1
forward 2
forward 4
forward 3
up 2
forward 1
down 8
forward 4
down 5
forward 9
up 1
forward 3
forward 6
up 8
forward 1
forward 7
up 9
down 3
up 7
down 1
forward 5
forward 3
forward 7
down 5
down 1
down 2
down 4
down 5
down 5
down 8
up 9
down 7
down 7
down 6
forward 3
forward 5
forward 1
forward 8
up 4
down 8
down 3
down 1
down 9
down 3
down 9
down 8
down 2
forward 1
forward 7
forward 1
down 3
down 1
up 3
down 6
forward 6
forward 6
down 8
forward 3
down 1
forward 2
down 4
down 7
up 8
forward 4
down 4
up 1
forward 6
down 6
forward 5
forward 9
up 5
down 3
up 9
down 6
up 3
down 9
down 4
down 2
forward 3
down 6
down 7
down 9
forward 7
forward 2
forward 5
up 6
down 8
forward 1
down 2
forward 8
down 5
down 2
up 4
forward 9
up 4
down 4
down 2
forward 3
up 2
down 5
down 9
up 4
forward 9
down 5
down 2
down 2
forward 9
up 9
forward 6
up 7
down 2
forward 8
down 1
forward 2
down 3
up 6
down 4
forward 5
up 4
forward 5
forward 9
forward 9
forward 5
down 1
down 7
forward 6
forward 9
forward 3
forward 4
up 8
down 1
up 1
down 3
up 1
down 5
forward 6
up 5
up 6
down 9
forward 7
down 7
forward 1
forward 2
up 4
forward 4
down 9
up 4
down 6
forward 1
up 9
forward 2
down 8
forward 6
forward 6
down 6
forward 5
forward 9
up 8
down 4
forward 8
up 6
down 4
up 9
forward 2
down 8
down 6
forward 2
down 3
forward 1
forward 3
forward 2
up 4
down 6
up 6
down 4
down 2
forward 1
up 7
forward 9
forward 9
forward 7
down 1
down 9
forward 5
forward 4
forward 1
forward 4
down 5
forward 6
forward 8
down 5
down 7
up 2
up 1
forward 5
down 5
down 1
down 5
down 8
down 8
down 5
forward 7
down 6
down 2
forward 9
forward 1
forward 3
forward 4
up 3
down 4
up 7
forward 8
forward 7
up 4
down 9
forward 7
forward 6
up 1
down 1
up 6
down 5
up 1
forward 2
down 2
forward 3
down 6
up 5
up 4
down 8
down 5
down 3
down 4
up 3
down 3
down 2
down 7
up 2
down 8
forward 5
up 1
forward 9
down 6
down 6
down 8
up 4
forward 9
forward 8
up 7
down 9
down 4
forward 9
forward 9
up 2
down 1
forward 1
forward 4
forward 2
forward 9
down 1
down 3
down 1
down 3
up 5
down 2
forward 4
down 2
forward 1
down 6
up 9
down 3
forward 1
forward 5
forward 8
down 5
down 6
down 9
forward 4
down 7
up 8
forward 8
down 9
forward 6
down 8
up 3
forward 4
up 9
down 7
up 7
forward 6
forward 1
up 9
down 7
up 7
down 5
forward 6
up 7
down 8
down 8
forward 4
up 4
forward 1
forward 6
down 4
up 9
forward 4
up 1
up 8
up 6
forward 9
forward 4
forward 7
up 1
down 5
up 5
up 5
forward 4
down 9
up 8
down 6
down 3
down 6
forward 2
up 1
forward 3
up 8
down 1
forward 5
down 9
forward 4
up 5
forward 3
forward 2
down 8
down 9
up 6
down 9
down 7
forward 5
forward 4
forward 9
up 8
forward 3
down 7
forward 9
down 8
forward 4
forward 8
up 9
up 9
down 6
forward 5
forward 5
forward 5
up 2
up 2
up 1
down 6
forward 2
forward 2
down 8
down 6
up 2
forward 1
down 1
up 5
forward 7
down 2
forward 1
forward 3
down 5
down 7
forward 8
forward 4
forward 9
up 1
up 7
up 9
forward 3
up 1
forward 6
forward 3
forward 9
up 9
down 6
forward 8
up 6
down 9
forward 3
forward 7
down 9
forward 4
forward 5
forward 7
down 1
down 4
down 3
forward 6
down 3
forward 7
forward 8
down 1
forward 3
down 4
up 7
forward 2
forward 8
down 6
up 3
down 2
forward 9
forward 5
forward 7
up 2
up 6
down 9
forward 1
up 5
forward 1
up 6
up 2
up 1
forward 6
down 8
forward 7
down 5
forward 3
down 9
down 4
forward 3
down 1
up 1
up 7
forward 4
down 6
forward 3
forward 2
down 8
forward 9
forward 6
up 3
down 3
down 1
down 7
up 8
up 2
up 8
forward 6
forward 8
forward 6
forward 4
down 6
forward 6
forward 6
forward 1
down 2
forward 2
forward 6
down 1
up 6
forward 3
forward 9
forward 6
down 2
forward 2
up 4
down 2
up 4
forward 2
forward 2
forward 3
up 1
forward 8
forward 3
forward 3
forward 1
down 5
down 9
forward 4
down 1
forward 5
forward 2
down 5
forward 6
forward 3
up 3
forward 6
forward 9
forward 5
down 2
down 2
down 7
forward 8
down 1
down 5
down 9
up 3
up 5
up 4
forward 3
down 9
down 2
down 8
down 5
down 2
forward 4
up 3
down 5
up 3
down 8
down 7
up 1
forward 2
forward 1
down 2
up 1
up 5
down 8
down 3
up 9
forward 2
down 8
down 4
down 3
forward 3
forward 7
up 1
down 9
forward 1
down 6
up 3
up 5
down 6
up 4
forward 7
up 4
forward 9
up 4
forward 4
down 7
down 2
down 8
up 3
down 7
down 4
up 5
forward 8
down 8
down 1
forward 7
up 9
down 5
up 8
down 1
up 3
forward 8
up 4
down 1
up 1
up 7
forward 3
forward 6
forward 5
forward 2
down 4
forward 2
down 7
up 7
up 6
down 4
forward 4
forward 9
forward 7
down 4
down 6
forward 5
down 2
down 6
down 2
down 2
forward 9
up 5
forward 9
down 3
down 6
down 1
forward 5
down 5
forward 7
forward 9
up 8
forward 6
down 6
down 2
forward 8
forward 5
up 9
up 4
forward 1
forward 2
forward 2
up 9
down 6
forward 6
forward 8
up 5
up 7
forward 4
down 3
forward 1
up 6
up 9
forward 6
up 8
forward 5
down 4
forward 1
down 3
forward 1
forward 6
forward 2
up 4
down 6
forward 9
down 2
forward 4
down 4
forward 3
down 5
down 2
forward 2
forward 2
up 1
forward 1
down 7
down 8
up 6
forward 8
forward 5
forward 8
down 6
forward 5
down 3
up 3
forward 4
up 9
forward 8
forward 4
down 3
forward 6
up 6
down 2
down 7
down 3
down 2
down 8
forward 5
down 9
up 6
down 6
forward 8
down 1
forward 8
down 1
down 1
forward 3
forward 9
down 6
forward 7
down 4
forward 1
forward 4
forward 3
down 6
forward 5
down 5
forward 1
forward 3
forward 8
down 9
up 8
up 6
up 6
forward 2
forward 9
down 4
down 8
forward 6
up 1
down 2
down 6
forward 6
forward 2
up 8
forward 6
down 9
down 1
forward 7
forward 6
forward 5
forward 6
down 6
up 7
down 9
forward 9
forward 3
forward 5
down 4
down 1
down 7
up 3
up 7
forward 6
forward 8
down 7
down 4
forward 7
down 6
up 1
forward 4
down 2
forward 4
forward 3
forward 4
forward 4
up 3
down 8
down 4
down 1
down 8
down 3
up 9
down 4
forward 7
down 6
up 2
down 8
up 9
down 6
forward 1
down 3
forward 9
down 9
forward 1
down 5
up 5
up 1
forward 8
down 8
down 9
down 5
down 2
down 5
forward 3
down 9
forward 4
forward 4
up 2
forward 8
forward 4
forward 1
down 5
forward 5
down 5
forward 6
forward 4
up 5
down 9
up 3
up 8
forward 5
forward 9
up 6
forward 6
down 5
forward 7
down 8
down 7
down 9
forward 4
down 8
forward 4
down 5
forward 6
forward 4
down 7
down 5
forward 4
down 3
up 4
forward 3
up 9
down 8
forward 9
forward 6
forward 9
down 1
forward 2
up 5
down 9
down 2
down 9
up 8
forward 7
forward 8
forward 4
down 1
up 8
forward 8
down 8
down 4
forward 9
down 3
forward 7
forward 9
down 5
forward 7
forward 1
forward 5
forward 2
down 4
forward 7
down 6
forward 3
down 9
forward 3
down 5
up 6
up 3
forward 1
up 9
down 1
forward 2
down 8
down 7
up 9
up 2
down 5
up 9
forward 9
forward 9
down 1
forward 5
up 5
forward 1
up 1
down 3
forward 3
down 3
forward 3
up 5
up 4
down 7
down 7
down 4
forward 7
down 6
forward 1
up 1
down 8
forward 4
down 3
forward 9
up 6
forward 6
forward 3
up 9
down 9
forward 4
up 5
down 3
down 8
down 3
down 3
forward 4
forward 6
forward 4
up 2
up 3
up 5
down 5
down 6
forward 5
forward 4
down 1
down 2
up 8
down 2
down 1
up 4
forward 5
forward 8
forward 8
forward 5
down 3
forward 4
up 8
forward 7
forward 4
down 9
down 6
forward 2
down 7
forward 6
up 7
up 1
up 4
forward 2
forward 9
forward 7
up 5
forward 2
up 5
forward 1
forward 2
forward 4
down 6
forward 2
up 6
up 7
forward 3
forward 2
forward 6
forward 4
forward 9
forward 6
up 6
forward 5
up 7
up 5
down 6
down 2
down 1
forward 7
down 5
down 1
down 7
forward 8
forward 8
forward 5
down 9
forward 6
               ")
}

pub fn parse_binary_u64s(s: &str) -> Vec<u64> {
    parse_input(s, |parts| isize::from_str_radix(parts[0], 2).unwrap() as u64)
}

pub fn get_diagnostics() -> Vec<u64> {
    parse_binary_u64s(r"
010100110111
101001010000
101011110010
100100011101
101000011000
110011011110
111010010100
001111100000
111101100001
100010101110
101101110101
010010101110
111001110100
000101111000
111101111100
000010001100
101010111101
001010011011
001101101101
000000110100
001100101011
110110110010
001110000011
011001111001
110100110011
011000110001
111100100010
101011000000
011101000111
011111000111
111011001110
011111010100
001110110001
010110110001
100111011011
100110100100
110010111000
101111001100
101111111001
000001000110
100010010110
110111100101
001001010101
001110001011
101111001011
111011110010
101001001100
101010100001
000000111101
100000000111
111010111101
000110110111
100100101111
110101100101
011010110010
110100001110
001011011010
010101010101
011110000100
010000000010
010111010111
011010011100
101101001011
000111100101
101111001000
000100010000
111000011111
100001010101
011101111110
001111011110
001100111111
000011000100
001011101010
001011010111
101001001110
010101011001
110101001011
011110011110
001000110010
011101110001
101110000000
000001100111
110111000011
001001111010
100100000000
000000011101
111110111011
101001111100
110110100010
101011011000
000111100010
011000110100
111100100100
010010100000
111101001011
111001000000
001001000001
010010100001
110110001100
001101100001
011110010110
100111011101
001001110110
001001100011
011001111010
110110010111
110100111010
111110011100
100000100111
010001101101
110100110101
101111101001
100110010000
100011001111
101111001010
001110111001
111101001101
001010111101
010010011010
100101101111
100000011110
011111010001
000010001101
010100101100
001010001100
100111011100
011110000000
100000011111
000010010100
000001001101
011111011111
100101001101
000100010110
011011111100
000111000011
010100101011
011000101111
001001100111
110111110100
111101111011
110011010101
100111111111
010100010000
001111110101
010011010001
101000111111
000001110100
010010010000
100010000101
110111100111
001011111101
101100101101
001010110100
000100110001
111101110110
111110101110
100011100110
011001001010
001000010111
010001110110
011110000010
101010101111
110100100100
010001100101
001011111110
100111100000
111101000010
101101011110
101100111100
001110011100
110110100101
000110111010
011001010111
010001000011
100010010111
000110110000
001000010101
010011010010
110000100010
010000101110
010110111000
011101001000
011110000111
100110100011
110011001001
001110000111
000001101110
001000100110
011101111000
101100000101
110001100000
101000100101
110101110101
111000101111
101000101001
101000100000
101011010110
000010111100
011101101000
000110101001
000110110110
100111001011
100010001101
101111000111
100100111000
100100111100
000000100010
100110000111
101110001100
110010010010
100110010011
100100000011
000001011111
110100100000
000000111100
110110010001
001101111110
010011010011
001000111110
100010010100
000111110101
111111101001
100110001110
101011011101
110100100010
010100001000
100111101001
010111010001
001110101000
100111101111
100010101011
101111100111
111001100110
111100110101
001101001111
111011011111
011011100110
101111011000
100110110001
100010011101
000111010101
101101011100
111010100100
001101000100
101111100101
010110001010
111101010000
100111110100
100000000011
010001111110
011010001110
110100010100
010100111100
011001101100
110101001001
000011100111
011000000000
110001000011
101011001101
001010110000
010000011010
101110101010
001010011111
011101000101
110011101010
101110001110
100111110000
100100010100
010011101000
100110000110
111100010011
011101101011
100110010100
011011100001
011111100110
111100101111
000111101001
100101011101
010101001110
110011110011
111011011100
101001101111
100001010111
110010111001
011011101011
111110001010
000010111110
011010000101
011011000111
110000000101
010110111011
010110110000
011000110110
100101001000
000111110001
011110000101
001000010000
011011000011
100101100011
010000100000
100010011000
001011100001
000110100010
011000111010
100011001011
101111111010
001100110101
101100111111
010011100111
001110110010
000100100110
010100010001
100100011011
110110100100
100011011001
110001000110
110110100000
101110001010
000100101010
000000100110
110110111110
011000111101
001101111000
110001100001
101011011100
101100001000
100000111011
011110010100
010000101111
100011100101
100111010100
000011010110
111010110011
010101000001
001101010100
010001010011
100011000101
011100011111
100101100010
011111011100
011010010000
011011011110
101000000100
110111111100
100111110011
110100010010
100100011111
000100001101
001101100010
000001010110
110110010010
001110000110
101100110101
111000110011
111110111111
001000111000
010101111010
010011101010
010010100100
000101001011
010011011010
100110111011
100011110111
111001001011
011000000111
000101101101
001000011100
110111111010
011010101001
110000010101
011001110010
001001001011
111010110110
101010000110
110111010011
101110011010
011111110101
010100110011
010000100111
010100001011
011111010110
110011111110
100100111101
000100111001
011011101111
111010001101
100000110101
110000000010
111110101011
011000010110
001011101100
010001110011
111010111010
100010011110
001100000011
000101110000
111011101111
111000000111
100101011100
010111000010
010010111010
001111111100
101001000000
000010111111
001110011000
111110011110
101101000110
101110100110
100011011100
101100000001
111001111011
101010101000
010111101110
000010100101
100010111000
101111000100
000010011101
011000111011
010110011011
010101100010
100101010111
011010101110
110011011011
110100101011
110110111100
000101110011
011001110101
111000100100
101010000001
110111100011
100001000110
001101011111
101010000101
011111111000
000111011110
100001111101
011010010010
101010011100
101110101100
000001010100
101010100110
001100101010
101110100100
100100111001
110010100111
000100001110
111001110101
110000101110
000010011000
010001110010
000100010011
011110100001
001010111010
010010111001
010001001011
101101001110
011001000110
110110011001
110111000000
011010111001
001000010001
010110011100
000111110010
101110000010
000101001100
110010111101
001101010000
010010011001
010000010111
011110011100
111000100011
110101011000
101100100010
111111100110
010011111110
111110000100
100010100100
101110111100
110000010010
011010000110
000101100101
001011001000
111000110001
000010001011
111000010000
100000101000
001101011101
101000101100
010100111010
101100000110
001111010011
011111110011
101000100010
111000001111
111000111010
001110000101
110001010011
011101011010
101001000101
111111001110
111110110101
110001110100
101101010101
000100011111
101100100110
000111011000
101010110001
000100110110
101101110111
100011101000
010011110101
110101111001
110001110011
000100111100
010011010110
101100000100
011011101000
101110000100
100100010110
111011100100
011010110000
100111011010
110100011010
101111111111
110110011100
110011100101
100001111100
111101100110
110010001010
010001001101
101110100001
111101001100
110101000100
011001110000
010110100011
111111000001
110010100000
101100110000
110000000000
001101110111
001100001000
001101101000
101100100011
001001011011
011011101110
010011111000
110100111000
011001101010
111011111010
100011111010
001011011110
111101100101
100011100100
101110101000
000111110110
100111010001
110000011100
111111111110
110100010101
101001110011
000010001110
000010001001
110000110000
001001000110
110111110000
010101010010
111101110001
110101101101
010111000111
111010110111
001011011011
001001100001
101000101110
101100110010
100100100100
011110111001
011100000110
100110110111
111010001110
110111111011
011010111000
011101100001
011110001111
110101011011
000000001111
101000001110
111010101110
001100001110
010111000101
111100111110
001110101110
011101111010
011100001111
000000000101
111111000100
000110010101
001101000010
111001111100
101100010100
001011001001
010110000010
010001101000
001111101111
011011011011
111110000001
100111011000
011000000110
100111101110
101100000000
101011000100
111000011101
100001101001
100001101000
011110001001
110110011011
011100010111
000100111000
000110000001
000111001100
000111111010
110110000001
000010011010
100000101001
101110001011
100010110101
110011010000
111101111111
100101011110
101110011111
111111011111
011010010110
010100101010
001010100001
000000110110
110000111101
010101101011
110100100001
011110001110
111001010011
001000001000
000011111110
111000100110
100100101000
011011000110
111001100011
111100101000
110001100010
011000000001
111101010010
001011000100
010100110110
000001111101
001010000011
010010100110
100000011101
101011010011
000111110000
101001001011
100000001000
010000111100
000100101011
011101010000
101101010010
100010011001
001101100101
101010010100
111011111001
101000010001
001111000000
011001000010
100101010110
000100001100
010000101000
110001111111
000101010111
110100101110
111100110001
101011000001
101100101110
110000101100
101100111110
111000010110
010110101110
001010100110
110011010010
111001100000
100100100001
000011011001
111011011110
011110000011
101000100001
101010010001
101001100001
100011001010
100000000110
010000100001
001011011001
110111010100
111001000111
111111110010
101010100101
100110001011
010110011001
110001111110
100100000111
110001110111
101110010101
010010111000
000000011001
101110000011
100001010000
001100001011
111111001100
111010010010
010011100001
100001111000
000010000110
010100011100
101111101010
100110010101
101001101001
100110101001
001001011100
001100011101
001100011001
000100100100
100011010100
000100001011
111101100011
011010001011
111000101101
101000010000
010110001111
111100010110
000111111101
100100111011
101011000010
011001100010
101111011100
101001110101
101111101100
110101001111
111101100000
101110011011
100101110000
001100111110
010010101010
001100100100
001010101100
001101100111
110010011100
010000001001
011011110001
100101110001
101111100100
110101101000
110000100000
101010011101
111000010011
100001010100
000101101010
101111001001
000110101101
101011010111
000001001100
100100111110
000010111011
000100000100
100100001110
011010000001
010101110011
111101101101
101110101111
100010100011
110001011101
110001011011
100011110011
111000011011
110101110010
000110010100
101000001010
011001011010
111000001101
101001101101
111001000001
000100000110
110000000110
010011001110
011101000001
010000101101
010011011001
010101001111
011110110001
100111110001
101111011101
111001000010
111111111000
001011101011
001010100111
111110111101
011111011101
000100111101
010010000101
001111101011
110010100100
110001011001
010111111000
100100101110
110111011101
100100000110
111111011011
101101111001
111011010001
000000011100
011011101001
100010111101
110111000110
001100110010
111100111100
111111000010
100111010111
100011001100
110101011100
001111001100
101010000010
110011010111
110011010001
001110110110
000011011100
001011001011
100000000001
110000100011
011011110011
100101100100
011100100011
100001110111
011101001001
011101100011
011001001101
011001000100
010111001111
100001001111
101001100000
110010001011
010101011100
011110110010
111010000110
000010100100
110111000111
001011010110
010001000100
110100010111
010101100110
010011101111
101000001000
011011001011
100001000001
101111110011
100110110011
100011100000
101101000010
000101011000
111101110010
110111010110
101110000110
110010110001
000001101111
110101101111
000010111010
100010010001
111010011001
011110011011
000110101010
010100001111
010111011000
000011110100
010001010101
110111011001
010001111001
111010111111
010010010001
010001100011
111110001001
101000010111
001101110101
111011000000
001100110100
000110001001
110111101001
010100110000
101110111110
100000000010
110011010011
010101100101
110100110001
100010100010
101111111000
111111100100
011100001101
000000100001
100110100110
010100100011
000000001000
101010110100
100010001111
111000001011
010101000111
001111110001
000000111011
111111101100
001110110000
011110111011
001110100011
100110000010
010110110011
001001101110
110011101110
111001100010
111100010000
000001010111
001110001100
110000101000
100101111010
001011001110
100111101100
111001101100
110111110010
101000110100
100011100011
100000100101
100001111011
011110101001
000111000100
010111100001
111111010001
100100001100
111111010111
001101111101
000110001101
010110000001
111011010110
011110110110
011111001001
001101011010
010101110101
110001100100
101101011101
011011010110
001011001101
101110110101
001101010010
101010001101
100111000000
110110101100
001011111000
000100111011
000111110111
101000111100
110000110011
000001000011
000111111110
001010010010
100000111001
010101111100
001100010100
010101110111
110101010010
000001001111
101101111100
011110111101
111001010001
000100101101
011100100100
110101000111
011111100011
110001001101
100001100111
101101100111
000100110000
101001100010
001101101111
100011000100
011100101111
011001100100
011010011110
010011001010
011110101000
111101111010
110001010100
000110010001
001111011011
110000111011
000001111001
010011001100
100110101011
111011001011
001100110011
010010011101
100011110000
110011110111
    ")
}

pub fn parse_bingo(s: &str) -> (Vec<u32>, Vec<[u32;25]>) {
    let mut calls = Vec::<u32>::new();
    let mut boards = Vec::<[u32;25]>::new();

    let mut row : i32 = -1;
    parse_input(s, |parts| {
        if row < 0 {
            parts[0].split(",")
                .map(|x| x.parse::<u32>().unwrap())
                .for_each(|x| calls.push(x));
        } else {
            if row == 0 {
                let new_board : [u32;25] = [0 as u32; 25];
                boards.push(new_board);
            }
            let board = boards.last_mut().unwrap();
            let numbers = parts.iter()
                .map(|x| x.parse::<u32>().unwrap())
                .collect::<Vec<u32>>();
            let r = row * 5;
            for c in 0..5 {
                board[(r+c) as usize] = numbers[c as usize];
            }
        }
        row = (row + 1) % 5;
    });

    (calls, boards)
}

pub fn get_bingo() -> (Vec<u32>, Vec<[u32;25]>) {
    parse_bingo(r"
91,17,64,45,8,13,47,19,52,68,63,76,82,44,28,56,37,2,78,48,32,58,72,53,9,85,77,89,36,22,49,86,51,99,6,92,80,87,7,25,31,66,84,4,98,67,46,61,59,79,0,3,38,27,23,95,20,35,14,30,26,33,42,93,12,57,11,54,50,75,90,41,88,96,40,81,24,94,18,39,70,34,21,55,5,29,71,83,1,60,74,69,10,62,43,73,97,65,15,16

83 40 67 98  4
50 74 31 30  3
75 64 79 61  5
12 59 26 25 72
36 33 18 54 10

68 56 28 57 12
78 66 20 85 51
35 23  7 99 44
86 37  8 45 49
40 77 32  6 88

75 15 20 79  8
81 69 54 33 28
    9 53 48 95 27
65 84 40 71 36
13 31  6 68 29

94  6 30 16 74
91 47 66 31 90
14 56 45 55 20
58 70 27 46 73
77 67 97 51 54

60 12 49 80 52
15 27 85 82 48
21 76 83 55 54
    8  5  4 38 47
73  2 86 44 99

64 60  6 38 37
    3 69 21 24 11
36 88 16 55 41
78  7 81 95 91
27 34 92 39 30

38 57 20 68 49
21 18 69 97 60
34 92  0 59 62
10 43 93 87 64
53 35 94 76 61

48 74 58 13 54
57 18 37 92 78
89 10 25 97 43
38 99 64  6 66
21 83 29 93 95

94 37 98 87 51
50 65 77 83 95
68  4 91 53 32
56 26 15  2 80
20 55 58 81 33

73 32 66 38 89
18 79 40 78 55
26 63 93 60 98
42 65 96 47 57
45 75 72 23 35

64 28 21 80 27
93 58 71 67 11
61 20 74 13 90
76 35 46 94 40
92  2  4 85 69

22 70 87 31 61
74 78 58  4 90
63 28 24 35 84
59  8 89 88 47
17 48 80 33 32

57  7 30 39 19
    1 13 41 15 50
44 72  2  5 70
34 93 60 80 69
49 14 25 10 33

45 41 77 89 27
68 99 11 32 95
15  4 72 98 52
53 28 14 75 44
57  9 62 92 69

    7 21  2 73 40
52 60 57 53 65
63 86 36 82 44
14 28 39 12 80
66 64 91 50 51

82  5 38 41 95
70 52 11 21 51
81 20  0 14 83
57 36 60 59 42
77 13 85 32 63

91 40 42  3 50
22 24 81 31 93
    9 79 82 43 89
    6 77 76 26 37
29  8 53 23  4

    7 78 32 44 74
29  3 84 38 79
58 41 87 88 30
68 19 72 81 47
15 63 52  6 26

20 41 92 84 25
    9  4 96 85 66
49 15 50 89 19
48 45 82 86 60
29 18 53 47 16

75 39 45 31 73
91 86 69 94 66
28 61 17 20  0
88 21 89 41 37
35  2 10 18 82

80 23  4 73 93
89  8 20 12 45
74 99 58 90 67
50 85 35 88 55
18 65 42 47 48

16 38 65 64 25
20 74 37 15 82
23 76 97 48 53
60 93 85  1 35
77 10 59  2 58

11  9 57 40 46
35 88 29 52 17
30  2  7  6  0
13 63 44 68 59
83 98  5 50 65

82 40  2 14 50
    7 31 91 19 11
51 42 56 44  6
66 74 22 95 64
63  1 17 86 24

18 19 66 63 80
65 23 74 22 85
    5  7 37 75 51
38 58 68 83 32
40 29 31 15 43

37 54 13 77 31
57 96 28 87 95
10 11 19 49 45
12 21 79 56 24
34 64 84 69 17

    6 33 48 61  0
85 34  7 84 37
25 46 59 76 82
18 62 20 44  2
12 78 60 56 99

95  6  1 39  2
46 34 28 64 22
48 23 89 56 55
44 81 82 43 74
65 31 94 49 91

69 42 27 52 54
79 60 62 83 38
    5 21 56 48 99
51 40 15  7 24
92 10 66 64 88

99 18 22 52 81
21 42 13 71 59
91 38 68 10 25
54 19 76 60 24
41 92  2  3 64

76  5 25 55 84
70 15 89 67 68
34 86 11  4  6
    9 23 43 41 52
58 10 88 38  0

83 91 85 81 86
    5 10 89  6 48
45 77  2  9 90
74  8 57 75 67
73 30 49 96 15

66 13 82 89 20
    5 67 94 64  0
58 73  4 62 49
59 28 75 79 44
54 71 57 33 36

23 36 29 80 30
51 91 77  2 84
78 90 15 21 75
28 93 22 55 16
67 50 58 60 68

82 80 37 91  7
54 81 85 25 24
33 36 89 30 56
83 95 99 48 10
    4 44  1 55 79

    9 13 53 20 26
    7 31 49 84 58
51 91 90 68 55
19 38 23 81 33
34 99 85 37 54

44 66 81 78 15
31 14 48 65  0
26 10 20  4 41
77 68 95 34 73
74 12 36  3 60

    6 24 78 58 36
30 51 75 13 40
17  1  3 42 59
64 20  4 18 79
37 61 84 63  7

41 83  1 75 18
14 56 67 32 22
69 80 46 84 49
72 21  9 10 35
    4 37 28 40 12

56 80 47 17 70
12 22 77 81 11
61 30 58 60 71
52  0 25 86 65
59 28 79 20 26

70 75 81 18 67
    2 85 73  8 17
74  3 34 92 30
51 72 84 56 45
37 90 31 97 78

    2 73 71 43 69
    6 54 89 57 93
81  0 39 25 90
79 27 92 29 15
45 76 87 11 91

98 35 51 49 34
23 12 77 27 82
    6 89  0 76 46
81 48 99 45 90
10 75 17 96 29

45 19 82 93  0
84 24 73  2 98
94 46  7 48 56
80 34  5 18 31
58 33 83 29 55

66 81 99 54 63
21 94 72 77 64
58 52 85 46 68
    5  6 78 42  4
76 38 51 24 33

93 26  5 59 67
13 84 76  4 69
    0 17 30 83 48
    8 53 32 14 92
94 18 66 46 61

28 48 38  6 25
70 39 71 77 22
66 94 18 43 36
30 67 57  9 90
15 34 50  3 86

11 90 99 92 87
78 79 56 21 50
19 18 22 20 30
95 41 59 85 26
66 58 46 38 57

49 92  2 93 77
46 89 44 57 19
53  8 32 18 88
54 95 59 70 10
72 84 86 42 81

44 78 25  4 57
72  7 42 94  8
61 79 11 29 59
22 82  6 90 12
98 77  5 68 50

48 41 64 15 57
76  7 52 53 93
70 84 94 38 35
47 18 13 51 21
77 62 63  3 65

31 33 48 79 69
30  9 83 53 50
60 94 36  2 28
59 19 10  5 40
26 41 72 14 96

    0 16 49 75 17
28 20 21 99 94
15  8  4 68 71
23 53 76 19 74
79 61 72 70 52

70 89 12 80 76
14 18 16  4 91
34 64 43 51 71
    6 78 30  5 13
57 42 15 73 24

64 99 72 41 54
21 29 25 40  9
92 48 82 70 98
65 62  8 78 27
71 86 36 34 23

23 19 72 77 63
85  0 61 40 14
69 76 18 56 95
68 66 28 79 13
83 84 45 89  2

18 40 28 70 37
80 30 67 96 34
77 25 97 32 11
48 46 89 14 29
    2  8 95  0 12

    0 26  1  9 30
17  2 78 18 65
84  7 61 93 81
80 44 82 23 99
72 95 19 60 28

37 39  0 20 21
91 36 93 16 22
53 95 26 72 25
97 33 60 55 65
79 56 73 29 75

22 58 99 57 28
    2 56 93 91 18
44 64 92 85 46
70 47 89 27 54
83  5 48 97 72

72  1 73 68 36
31  8 14 41 35
23 96  7 92 83
56 39 77 93 91
20 28 67 10 11

62 27 17 54  0
35 60 73 20  5
23 58 46 99 75
19 53 79 70 88
31 85 77  1 32

22 90 81 42 55
70 78 86 19 94
    1 43 15 33 51
84 96 87 58  6
49 64  4 59 23

82 63 58 75 89
35 37 52 80 24
93 50 76 79  1
86 59 30 92  7
42 11 55 70 22

83  3 71 28 95
70 23 68 57  1
60  6 19 63 32
64 55 97 81 49
91 80 88  5 35

23 68 51 62 20
70 52 98 34 41
12 21 85 43 84
69 49 36 28  0
76 30 58 91 60

30 72  6 41 43
67 79 46 96 99
58 71 39 87 69
17 18 11 57 25
45 75 16 33 42

22 75 24 74 90
34 70 44 86 23
29 59 68  4 48
88 45 92 27 49
47 77 26 99 82

42 29 21 74 33
64 37 38 50 84
46 44 41  1 67
53 66 96 68 59
    6 94 11 31 99

24 32 71 87 57
42 26 55 80 99
82 27 16 19 92
96 48 62 31 61
60 89 95 18  6

99 33 55 71 29
75 37 23 27 98
    2 78 90 18 35
59 10 56  0  6
12 19 76 70 96

33 37 23 61 80
    6 13 68 51 76
92 25  3 95 55
99 63 17 52 30
11 94 42  5 98

77 37 25 14 73
95 90 10 19 72
78 30 44 47 91
    3 60 32  5 66
21 55 87 98  6

    6 60 82 90 98
21 70 54 66 27
37 64 55 10 14
57 25 84 50 20
42 59 85  3 73

74 84 92 10 51
57 82 93 90 44
41 43 76 48 59
79 49 69 16 72
37 29 63 15 68

37 90 97 86 18
    2 83 30 53 92
45 35 78 47 40
67 61 17 14 84
32 33 81 10 11

46 48 39  3 50
83 29 91 73 67
25 43 89 71 36
63 62 78 95 18
82 34 23 85 11

19 68 80 50 13
    1 45 51 27 39
98 26 24 46 49
14 92 63 88 66
15 44 84 47 94

19 39 93 43 86
91 58  3 69 41
18 36 95 52 83
12  6 22 48  0
25 70 40 88 73

95 11 94 13 14
64 87 57 98 49
47 88 84 61  2
46 21 15 74 59
82 73 78  3 51

18 72 29  7 36
96 67 81 78 23
43 40 44 47 98
41 26 15 90 71
42 62 93 70  2

17  8 59 25 33
81 47 55 99 48
86 14 71 54 50
90 11 23 18  0
97 65 82 68 42

50 54 68 90 83
10 28 77 55 61
38 60 52 80 44
40 81 14 24 87
51 82 42 30  8

54  5 64 22 60
70 19 83 11 45
46 39  2 56  6
61  8 28 20 94
    0  4 81 34 84

96 21 48 89 15
91 40  9 97 65
26 58 10 18 78
98 79 29 80 28
17 59 43 84 99

67 73 21  9 31
68 37 26 65 84
63 24 42 27 40
61 25 30 34 35
53 23 48 81 29

24 34  5 67 62
89 85 68 37 78
42 87 13 49 41
74 55 70 86 76
73 94 97 63 48

88 24  6 75 30
77 64 16 34 93
36 76  0 40 81
67 14 89 84 95
32 19 18 66  9

97 71 65 30 69
41 21 40 31 33
50 55 35 52 53
    4 51 13 81 72
12 83 14 64 18

97  7  8 74 10
    3 92 31 25 41
20 32 45 72 55
    1 43 49 98 27
99 54 57 13 76

86 81 67  6 97
34 18 96 43 56
59 75 17 26  9
    0 38 60 94 14
    4 55 64 61 88

37 15 48 43 66
45 54 90 81 47
63 64 28 82 93
34 52  6 99 61
49 12 71 23 46

90 87 89 97  1
48  0 82 60 43
55 30 68 25 83
78  3 23 16 66
98  2 19 63 17

89 52 49 14 38
69 12 50 17 90
58 53 26 20 29
39 65 43  7  5
84 68 94 85 25

95 25 42 36 47
50 54 83 84 37
94 70 99 79 18
57  8 69 52 31
66 20 35 71 38

81 18 47 68 15
    3 50 16 83 37
34 31  9 57 76
74 95 40 63 48
13 28 20 43 66

52 21 62 41 67
22 56 36 18 23
59 44 27 73  3
72 50 19 33 76
45 55 70 46 92

72 96 50 83 68
31 78 59 57 93
43 58 17 52 35
87 34 91 76  0
54 75 53 25 62

21 53 68  5 80
47 67  6 81  9
64 46 35 26 39
50 24 84 45 71
66 15 83  3 97

22 97 31 90 63
21 51 38 74 78
10 64 92 82  1
70 12 75 16 14
68 50 35 73 26
    ")
}

pub fn parse_segments(s: &str) -> Vec<((u32, u32), (u32, u32))> {
    parse_input(s, |parts| {
        let p1 = parts[0].split(",")
            .map(|x| x.parse::<u32>().unwrap())
            .collect::<Vec<u32>>();
        let p2 = parts[2].split(",")
            .map(|x| x.parse::<u32>().unwrap())
            .collect::<Vec<u32>>();
        ((p1[0], p1[1]), (p2[0], p2[1]))
    })
}

pub fn get_vents() -> Vec<((u32, u32), (u32, u32))> {
    parse_segments(r"
593,10 -> 593,98
777,236 -> 964,236
650,575 -> 476,575
120,612 -> 715,17
508,707 -> 508,89
98,834 -> 751,834
623,554 -> 623,701
929,976 -> 62,109
368,893 -> 330,931
495,335 -> 40,335
44,704 -> 423,704
683,711 -> 683,487
26,940 -> 833,133
961,183 -> 454,183
301,306 -> 301,935
973,822 -> 398,822
639,911 -> 515,911
861,180 -> 184,857
31,97 -> 857,923
966,376 -> 966,114
881,485 -> 881,377
930,98 -> 110,918
841,889 -> 841,35
512,261 -> 880,261
48,533 -> 48,674
207,226 -> 52,226
823,952 -> 177,306
331,566 -> 423,566
422,418 -> 422,130
699,517 -> 699,567
757,784 -> 241,784
508,445 -> 560,393
866,275 -> 435,706
74,41 -> 74,258
386,369 -> 334,317
240,94 -> 240,969
851,197 -> 577,197
28,906 -> 741,193
286,227 -> 286,293
849,800 -> 849,665
736,307 -> 336,307
69,701 -> 494,276
421,823 -> 96,823
121,626 -> 121,393
318,351 -> 194,351
670,671 -> 439,671
603,914 -> 603,272
61,507 -> 61,889
266,39 -> 157,39
543,664 -> 869,664
382,709 -> 884,709
499,80 -> 548,80
489,79 -> 878,79
695,86 -> 644,86
987,585 -> 987,557
287,67 -> 551,67
975,983 -> 35,43
707,351 -> 232,351
529,175 -> 852,175
32,811 -> 604,811
106,153 -> 815,153
195,268 -> 509,582
50,922 -> 312,922
220,500 -> 872,500
473,33 -> 569,33
858,847 -> 162,151
937,947 -> 26,36
726,435 -> 402,435
686,601 -> 474,813
764,880 -> 84,200
850,950 -> 850,464
413,620 -> 413,285
893,560 -> 229,560
149,100 -> 149,901
358,613 -> 243,613
202,445 -> 202,411
127,153 -> 513,539
147,846 -> 53,940
139,920 -> 679,380
913,953 -> 913,735
339,466 -> 339,177
113,882 -> 647,882
18,880 -> 134,880
897,152 -> 897,428
473,511 -> 636,511
880,370 -> 358,370
400,244 -> 721,244
419,987 -> 120,688
872,224 -> 481,224
335,302 -> 730,302
961,324 -> 961,157
769,301 -> 959,301
829,124 -> 144,124
523,372 -> 985,372
520,33 -> 520,685
554,644 -> 808,898
82,676 -> 870,676
303,612 -> 303,705
338,40 -> 338,939
836,47 -> 72,811
371,751 -> 575,955
929,505 -> 929,324
273,181 -> 275,183
347,595 -> 347,463
95,629 -> 95,606
809,188 -> 126,871
857,924 -> 145,212
668,277 -> 668,63
700,904 -> 700,45
814,899 -> 22,899
205,98 -> 714,607
943,28 -> 40,931
282,620 -> 773,129
424,803 -> 285,803
688,329 -> 299,329
146,628 -> 34,628
573,417 -> 164,826
292,232 -> 412,112
412,508 -> 145,508
632,648 -> 632,92
885,904 -> 885,513
295,981 -> 132,818
134,681 -> 41,681
810,531 -> 959,531
188,590 -> 188,215
960,795 -> 189,24
729,211 -> 729,833
214,817 -> 845,817
196,609 -> 584,609
384,908 -> 384,101
770,907 -> 770,530
451,469 -> 451,812
571,261 -> 834,261
799,436 -> 799,983
248,105 -> 248,879
783,906 -> 783,903
955,670 -> 790,670
723,750 -> 723,429
572,427 -> 546,427
610,341 -> 527,341
925,426 -> 816,317
151,403 -> 151,684
408,969 -> 408,369
276,425 -> 276,75
186,86 -> 186,758
412,420 -> 412,531
361,60 -> 976,60
787,649 -> 667,769
45,866 -> 91,866
319,963 -> 51,963
112,866 -> 112,747
291,475 -> 504,475
175,116 -> 357,116
968,961 -> 968,213
13,12 -> 987,986
640,728 -> 767,728
981,505 -> 246,505
864,981 -> 128,981
91,66 -> 931,906
798,116 -> 91,823
552,74 -> 88,538
620,872 -> 232,872
45,229 -> 658,229
413,75 -> 413,436
815,257 -> 815,686
989,22 -> 36,975
178,904 -> 233,849
635,128 -> 635,96
640,820 -> 640,313
890,787 -> 167,64
221,22 -> 826,22
914,132 -> 60,986
848,31 -> 392,487
105,969 -> 858,969
903,868 -> 143,108
38,941 -> 621,358
171,340 -> 14,497
286,460 -> 81,255
726,688 -> 857,819
494,689 -> 510,689
517,913 -> 598,913
932,66 -> 932,431
977,982 -> 18,23
95,101 -> 95,278
574,467 -> 349,467
63,803 -> 63,882
838,874 -> 255,874
900,752 -> 181,33
102,897 -> 989,10
374,439 -> 374,277
513,504 -> 513,885
814,932 -> 814,407
824,656 -> 959,521
415,570 -> 616,570
577,880 -> 577,181
287,524 -> 986,524
955,665 -> 323,665
556,365 -> 263,658
154,226 -> 886,226
803,750 -> 866,750
558,725 -> 558,395
941,115 -> 941,150
180,410 -> 180,874
458,753 -> 112,753
199,253 -> 363,253
423,650 -> 22,650
892,851 -> 279,238
611,109 -> 611,198
983,344 -> 339,988
299,47 -> 299,934
435,652 -> 700,387
186,775 -> 677,284
136,576 -> 136,368
818,744 -> 305,744
767,171 -> 767,431
930,842 -> 259,171
342,831 -> 342,601
193,672 -> 46,525
925,164 -> 528,164
725,92 -> 617,200
67,729 -> 67,739
547,153 -> 547,245
763,434 -> 763,509
314,888 -> 357,888
72,645 -> 491,645
92,67 -> 240,67
827,936 -> 788,897
852,378 -> 77,378
448,337 -> 668,337
846,739 -> 499,739
465,691 -> 315,541
716,163 -> 18,861
78,965 -> 983,60
114,952 -> 820,246
950,351 -> 419,882
266,36 -> 266,482
773,841 -> 773,66
742,198 -> 742,46
417,512 -> 304,625
900,277 -> 900,338
983,431 -> 473,941
986,282 -> 734,30
742,19 -> 769,19
952,320 -> 948,324
92,590 -> 548,590
107,39 -> 107,696
603,749 -> 603,26
55,282 -> 888,282
670,848 -> 985,533
981,982 -> 92,93
147,428 -> 649,930
773,737 -> 821,785
791,576 -> 791,852
327,672 -> 530,469
847,122 -> 381,122
419,493 -> 498,572
879,842 -> 879,239
267,717 -> 267,869
142,449 -> 174,417
342,718 -> 342,397
603,207 -> 314,207
612,648 -> 735,771
37,10 -> 971,944
891,716 -> 891,86
252,217 -> 662,627
185,165 -> 941,921
854,717 -> 676,717
158,791 -> 336,791
762,226 -> 98,890
73,189 -> 92,189
649,511 -> 253,115
719,456 -> 514,251
605,286 -> 325,286
454,609 -> 454,489
374,541 -> 783,541
599,177 -> 94,682
600,384 -> 32,384
810,933 -> 39,162
780,871 -> 409,871
24,639 -> 24,316
454,80 -> 454,95
556,541 -> 907,541
627,295 -> 750,295
245,71 -> 214,102
725,445 -> 614,445
779,538 -> 779,390
746,667 -> 351,272
117,776 -> 117,660
498,495 -> 88,905
697,721 -> 697,919
580,314 -> 580,166
22,656 -> 641,37
413,433 -> 44,802
182,305 -> 805,928
739,277 -> 739,499
172,210 -> 172,259
894,576 -> 894,322
265,263 -> 265,437
430,228 -> 780,578
464,531 -> 798,531
713,63 -> 668,63
918,831 -> 256,169
414,375 -> 467,375
440,32 -> 391,32
439,806 -> 955,806
335,820 -> 335,279
727,458 -> 422,458
312,274 -> 619,581
136,724 -> 538,322
589,680 -> 589,850
335,648 -> 232,545
499,216 -> 405,216
942,710 -> 942,455
969,556 -> 721,556
756,552 -> 756,902
98,870 -> 445,870
476,833 -> 476,269
820,127 -> 407,127
337,519 -> 714,519
756,95 -> 11,840
317,339 -> 317,286
353,86 -> 43,86
93,950 -> 938,105
705,509 -> 705,319
244,879 -> 721,402
434,794 -> 711,517
272,381 -> 431,381
652,104 -> 652,587
850,866 -> 34,50
645,902 -> 79,336
701,39 -> 701,295
492,793 -> 95,396
352,554 -> 395,554
123,405 -> 322,206
941,745 -> 716,520
450,512 -> 569,631
42,25 -> 817,800
909,387 -> 909,863
919,934 -> 919,546
439,881 -> 569,881
167,866 -> 167,669
242,264 -> 242,694
981,786 -> 228,33
452,434 -> 452,660
22,26 -> 22,29
26,155 -> 677,806
801,627 -> 313,627
657,135 -> 657,270
872,875 -> 440,443
636,248 -> 636,338
776,51 -> 93,51
498,600 -> 894,600
263,984 -> 263,807
416,390 -> 899,873
269,137 -> 976,137
752,12 -> 752,617
55,925 -> 548,925
856,551 -> 771,551
653,93 -> 653,587
403,286 -> 403,417
895,706 -> 221,32
139,822 -> 139,928
696,194 -> 696,143
270,678 -> 710,678
879,353 -> 879,360
949,712 -> 752,712
665,661 -> 817,661
462,952 -> 980,434
692,766 -> 692,478
157,117 -> 144,117
438,701 -> 408,701
401,703 -> 401,724
876,831 -> 108,63
749,892 -> 832,892
455,124 -> 455,776
551,222 -> 551,372
533,80 -> 726,80
342,740 -> 56,740
793,370 -> 34,370
949,614 -> 949,623
610,287 -> 610,760
978,834 -> 85,834
644,894 -> 644,341
35,887 -> 176,887
168,958 -> 964,162
341,886 -> 341,470
417,845 -> 417,702
338,347 -> 304,313
651,10 -> 72,10
853,160 -> 853,85
381,568 -> 436,623
794,437 -> 250,437
861,72 -> 206,72
807,813 -> 807,827
820,502 -> 820,329
547,508 -> 547,773
160,129 -> 160,175
756,468 -> 756,80
442,661 -> 405,661
304,817 -> 304,765
99,42 -> 957,900
212,110 -> 854,752
44,620 -> 661,620
212,311 -> 784,883
329,671 -> 329,908
86,359 -> 553,826
257,799 -> 934,122
409,663 -> 409,367
528,623 -> 593,688
957,525 -> 544,938
846,766 -> 113,33
176,680 -> 176,102
167,287 -> 167,929
932,870 -> 834,968
86,774 -> 49,774
745,231 -> 70,906
435,760 -> 138,463
776,810 -> 625,810
928,930 -> 76,78
602,24 -> 602,688
394,424 -> 65,424
946,966 -> 93,113
494,39 -> 951,39
607,699 -> 832,699
13,403 -> 391,403
726,475 -> 726,29
828,625 -> 836,617
396,770 -> 167,770
28,546 -> 374,200
56,113 -> 837,894
290,589 -> 740,139
930,805 -> 296,171
646,895 -> 49,895
111,15 -> 111,497
11,274 -> 570,833
257,624 -> 603,624
63,844 -> 666,844
846,661 -> 846,464
431,72 -> 431,674
726,674 -> 726,40
286,660 -> 286,909
847,222 -> 847,861
325,896 -> 325,416
793,953 -> 365,953
987,956 -> 62,31
845,853 -> 363,371
79,782 -> 506,782
424,21 -> 424,369
938,162 -> 177,923
86,193 -> 799,906
320,164 -> 320,654
840,306 -> 840,711
852,736 -> 852,690
876,966 -> 143,233
787,926 -> 38,177
374,112 -> 340,112
132,541 -> 740,541
29,28 -> 968,967
916,212 -> 170,958
371,553 -> 521,403
88,796 -> 870,796
656,367 -> 71,367
785,166 -> 785,427
320,30 -> 320,549
909,527 -> 816,620
832,965 -> 302,965
672,259 -> 80,259
578,513 -> 578,243
975,561 -> 537,123
135,330 -> 188,330
501,695 -> 501,573
717,230 -> 878,230
854,501 -> 27,501
705,885 -> 950,885
704,338 -> 704,630
477,485 -> 864,485
901,42 -> 305,638
660,540 -> 660,546
555,79 -> 190,79
226,126 -> 800,700
575,908 -> 944,908
94,478 -> 94,746
461,425 -> 929,893
861,429 -> 451,19
832,825 -> 179,172
186,133 -> 298,133
684,270 -> 558,270
786,872 -> 125,872
649,178 -> 649,595
893,738 -> 412,257
760,854 -> 901,713
16,914 -> 866,64
935,928 -> 266,259
323,229 -> 32,229
608,828 -> 608,49
715,892 -> 74,251
787,187 -> 787,903
405,793 -> 405,183
232,704 -> 232,389
130,706 -> 130,657
    ")
}

pub fn parse_lanternfish(s: &str) -> [u64;9] {
    let mut fish = [0;9];
    parse_input(s, |parts| {
        parts[0].split(",")
            .map(|x| x.parse::<u32>().unwrap())
            .for_each(|x| {
                if x > 8 { panic!("Invalid fish! timer={}", x) }
                fish[x as usize] += 1;
            })
    });
    fish
}

pub fn get_lanternfish() -> [u64;9] {
    parse_lanternfish(r"
1,1,3,5,3,1,1,4,1,1,5,2,4,3,1,1,3,1,1,5,5,1,3,2,5,4,1,1,5,1,4,2,1,4,2,1,4,4,1,5,1,4,4,1,1,5,1,5,1,5,1,1,1,5,1,2,5,1,1,3,2,2,2,1,4,1,1,2,4,1,3,1,2,1,3,5,2,3,5,1,1,4,3,3,5,1,5,3,1,2,3,4,1,1,5,4,1,3,4,4,1,2,4,4,1,1,3,5,3,1,2,2,5,1,4,1,3,3,3,3,1,1,2,1,5,3,4,5,1,5,2,5,3,2,1,4,2,1,1,1,4,1,2,1,2,2,4,5,5,5,4,1,4,1,4,2,3,2,3,1,1,2,3,1,1,1,5,2,2,5,3,1,4,1,2,1,1,5,3,1,4,5,1,4,2,1,1,5,1,5,4,1,5,5,2,3,1,3,5,1,1,1,1,3,1,1,4,1,5,2,1,1,3,5,1,1,4,2,1,2,5,2,5,1,1,1,2,3,5,5,1,4,3,2,2,3,2,1,1,4,1,3,5,2,3,1,1,5,1,3,5,1,1,5,5,3,1,3,3,1,2,3,1,5,1,3,2,1,3,1,1,2,3,5,3,5,5,4,3,1,5,1,1,2,3,2,2,1,1,2,1,4,1,2,3,3,3,1,3,5
    ")
}

pub fn parse_positions(s: &str) -> Vec<u32> {
    let mut positions = Vec::new();
    parse_input(s, |parts| {
        positions.extend(parts[0].split(",")
            .map(|x| x.parse::<u32>().unwrap()));
    });
    positions
}

pub fn get_crab_positions() -> Vec<u32> {
    parse_positions(r"
1101,1,29,67,1102,0,1,65,1008,65,35,66,1005,66,28,1,67,65,20,4,0,1001,65,1,65,1106,0,8,99,35,67,101,99,105,32,110,39,101,115,116,32,112,97,115,32,117,110,101,32,105,110,116,99,111,100,101,32,112,114,111,103,114,97,109,10,68,48,111,357,88,6,709,901,43,700,591,1146,317,930,727,806,194,1053,1093,819,530,2,1545,281,257,869,7,161,104,272,847,281,258,322,1076,214,1783,1499,55,985,220,1429,524,734,99,1067,1547,255,99,987,668,1095,529,233,324,61,23,45,259,169,13,618,1286,1293,468,1677,457,147,139,34,310,267,1132,451,529,853,324,779,0,554,91,72,694,442,79,1243,118,56,15,869,1075,931,33,585,392,15,15,861,1163,632,857,157,155,468,1073,299,1261,44,0,123,448,856,876,15,1032,310,322,1457,996,352,686,159,486,62,1035,540,685,242,198,1266,86,152,709,990,112,1479,605,274,233,1490,198,1349,2,1,666,628,878,262,960,709,414,740,322,389,45,517,1078,1030,884,286,300,101,671,286,948,209,354,1342,86,746,1308,181,479,300,129,45,5,1003,1006,584,309,16,1064,756,35,349,634,680,601,397,179,754,302,172,397,665,33,508,27,858,369,1236,19,228,854,206,32,17,1062,123,3,1140,80,240,60,497,937,83,249,91,550,317,72,808,1406,122,455,214,110,16,690,27,988,611,946,70,138,1730,1216,1073,20,439,806,222,965,517,1413,251,1,62,23,308,215,218,366,1025,142,450,50,76,682,698,1309,1286,318,460,554,23,268,543,780,425,1078,250,203,817,44,978,94,425,52,272,157,485,187,221,1,475,221,233,1183,1985,29,211,409,793,60,178,241,167,150,382,957,49,202,181,285,116,889,490,826,553,216,176,151,1710,536,1196,297,1112,715,258,387,392,950,1284,733,405,77,1310,74,287,6,321,117,286,127,380,680,197,143,416,110,1236,236,74,59,1100,64,10,30,135,12,1077,481,774,878,879,387,1502,327,17,88,486,238,168,201,1307,831,750,132,281,198,707,609,80,94,204,399,106,257,419,464,73,384,1944,112,669,45,497,334,95,1689,477,257,781,1007,417,626,361,440,474,719,13,42,184,1618,415,832,911,1237,169,481,43,977,59,734,346,367,146,642,298,390,1669,1319,724,1586,980,499,276,387,75,1042,14,58,653,532,1327,631,908,498,48,1576,1476,84,1457,1601,569,851,4,410,215,417,269,797,556,99,1703,520,1523,79,862,1086,578,686,394,1120,304,20,463,14,135,0,560,517,1164,132,791,304,725,1143,1246,111,57,513,247,243,269,209,181,98,294,68,18,106,75,190,153,193,219,16,467,955,767,1002,127,196,272,30,800,899,241,40,265,468,524,45,831,379,759,722,734,27,99,1383,80,351,686,44,77,136,386,95,901,135,334,1117,982,151,310,253,529,479,349,252,333,360,166,440,492,652,60,1591,219,456,1308,164,1117,93,670,477,558,76,154,67,111,321,356,899,1039,8,577,80,124,231,4,798,559,178,598,42,379,12,306,245,133,60,564,530,173,114,774,405,961,131,620,549,51,1437,9,22,553,301,987,245,1538,127,213,0,778,15,211,921,0,133,1166,280,240,1225,580,967,431,625,1162,213,120,186,1633,583,1542,102,3,97,516,123,676,564,774,12,34,938,1529,493,772,124,1441,287,679,231,1147,159,141,22,678,678,292,933,12,123,751,1656,1396,240,115,221,880,962,1237,1402,179,572,766,224,838,766,269,792,1727,166,30,315,293,757,201,934,1687,346,1962,8,627,228,16,440,33,414,212,1032,730,575,284,445,1356,141,707,779,920,407,858,326,232,356,444,302,165,42,460,1726,481,276,293,873,528,260,1060,197,154,682,180,154,1162,93,160,387,478,406,1138,987,435,727,148,582,163,210,766,632,257,732,276,205,32,489,456,70,1295,755,98,547,1295,334,1436,52,1292,185,1044,311,1122,630,588,560,54,1651,387,112,992,512,195,1333,1623,492,125,61,739,373,135,1436,280,580,7,291,71,875,112,680,852,89,455,309,129,173,530,90,245,921,1629,1592,465,146,1008,304,553,823,378,519,10,151,952,152,284,44,718,1,260,1268,94,1425,156,55,389,505,1176,487,596,16,888,26,1710,1232,1388,21,902,608,18,163,5,908,184,452,1362,493,261,595,1115,156,0,205,337,913,205,59,1143,99,538,1471,662,405,61,7,714,575,216,470,341,149,759,1286,414,367,79,134,426,41,389,1191,188,17,1227,27,929,798,21,81,65,1381,593,1360,106,760,505,1125,364,370,18,89,826,33,256,941,687,38,715,1091,175,1451,1,263,311,927,1893,681,565,364,113,1205,849,129,98,384,495,1785,804,60,128,852,93,983
    ")
}

pub fn parse_digit_segments(s: &str) -> Vec<(Vec<String>, Vec<String>)> {
    let mut entries = Vec::new();
    parse_input(s, |parts| {
        let mut parts = parts.iter()
            .map(|s| s.to_string())
            .collect::<Vec<String>>();
        if let Some(slash_at) = parts.iter().position(|p| p == "|") {
            let mut output = parts.split_off(slash_at);
            output.remove(0);
            entries.push((parts, output));
        }
    });
    entries
}

pub fn get_digit_segments() -> Vec<(Vec<String>, Vec<String>)> {
    parse_digit_segments(r"
cgaed gcdbfa gcfaed gfcde gadfceb cdbfeg acg eacf eabgd ca | agc efcgbd cag eacf
ga ega edgfa cafed gabd cefagdb begfad ebdgf fcbega cbgdfe | bgdef fdgeb dgabfe gea
ged eg acfgd fdceb cdbefa dgcfe cebfdg edcbga egbf ceadfbg | dfcge dacegbf gcdbaef fdceg
cbefg fedbcg bfdg abgedc fgced edcagf caefb gb fedcbga beg | bdfg cbeaf cfdebg gbe
gecdab gbafd geabdcf ecfa dbcfge cfb afgbc efgbac cf cgbae | fbc fbc cfebgad cf
cbdef febdga fba ba fadecb cgfea adbc cbafe fbedcag egcfbd | dfgbae fdcageb adcefbg efbdc
gecdba ecafbg ecabg bgacfd gecaf feba aedbfgc fca gdfec af | fac af cfa eafbgc
geab adgfc gacef acgefdb gecfba eg dbfgec beacf afedbc ecg | baeg fgadc fagbce edfgbca
gebcfad dafceg gdcaf bdfgea ab befgc gfbca bdca gab dgabcf | bga fgceb bag gfeabd
efgcdb egd gceaf dabgcf ed acegd gdbaefc dabe dgacb adcebg | afecg ed de egcfabd
eb efb eafgbd bgce adcfe fbcgd fgdbac bdefcg fcdbe fcebadg | ecgb bcdagef bcge egfcbad
cafgbde aced gfdaec defgbc ce gec gfdca bfgacd afgeb cegaf | cafegdb efabg cfbged eafgdcb
gcedba dgbe eba ecadgf bcfda bfegca eb gfecadb abcde egcad | eb be bea aeb
fgcd bcf edfbg dbgeafc fc efdbc fcdbeg beacd adgebf aebfcg | cf dgcf cf dceab
decag bade ad gda gadceb fgcbae adfgcb dfecg gceab edfgcab | adg gbcae gda da
adbgfe fd dbgf gdeaf agfeb agcde gedabcf afcedb gbceaf daf | afdeg bagefc afd bagfecd
cgeabfd efbgac dgcfba gbfd dcageb dga gd bgcaf fgadc aecfd | fbdg agd fgcbade gdfb
efdgc gfdb cegbfd bdefcga bcgef bacdge eafcd afgecb cdg dg | gd dgfce dg dcg
edgabc cgaf gdbfa cafdgeb dbfacg gdc adfebg fgbcd gc bcdef | bgacfd cdg ebfdc cafg
bcdfage ebgdac dcb adce cd acdgb bcfedg gbace dbfag fgceab | dcebfga caed eacd bgceda
fd gafcdb feadcgb dacefb gdfab fagcbe gcdf bdf edagb gacfb | dfb gcfabe bgdaf bfd
daefcb cg gfdea ceg ecfabg beafc gecdafb eafcg bcfg abdcge | gec egafc eabcf edbgac
degafbc fgeac gb acbeg bcead dcafge bcfg gbe bcgefa edafgb | fbaecgd bcgf beg bg
adeg ga agfcbde gadefc fbcged acg gefdc gcbeaf acdbf acgfd | cebgfda cag cfegab gac
bfegda eag dbcafg gfedabc fegcab afgbd ae faed dbaeg bdecg | fadgcb afed bgadcfe ecgabfd
bcdga bgd cdfag dbaec dcfgeab cadfeg gb cdgbfa fdcebg gbfa | bdg bg adcefbg efagbcd
acfgbed eagdcf cgdb db gdcbfa acbdf cbefa gadfc gbadfe bfd | bfd acfbd db gfdeac
agbed geaf cfbgaed dae ae deafcb fbcdeg dgefb dgcab fbegad | defabg cbdafeg febdcga acbgd
bcade fdecba bgceaf acg ecdfg adbg cgfdbae bcgead ga eacgd | cga afdceb cdgbea ga
agcefb cbfdaeg fabce eg dcgfb bcadfe gace bedagf gbefc beg | fegabd ceag ge dbeafc
efbgc ebgfa dacegfb daegf bcfgea dbcgef abfc agbecd ba bag | ab ab dcegbf cbaf
aebf fed fdbacg fe gdeacf egdfb ecgfabd gcdbe fbaedg fabdg | def aebf fe ef
adf cgabfd daegf af edfgc egbcfad gcbdae ebaf gbeda faedgb | feba eafb feba abgcdf
gab gcfb cgbdae defab afbdg acefdg bfgdac bg eafcbdg cagfd | bfgc fdbgeac cbaegd cfbg
eagfbd fcbgd baceg dba bcdgfe facgbd da dafc cgafedb bcdga | fdca afdc cbfegd gebfdac
feacgb gbfac dag dbac cdfgea gfebacd gfdeb gdfba da dfgcab | dga aedgfbc ad cdba
cfdabg ecag ecgadb eg ebg faebd dgbea dacfegb gbdca bgfecd | dgcefb baedg ecbafdg bge
bfdec fgdbce debga adecfb fa face dgfabec bfdae gacbfd bfa | afec af fa cfea
fcbad ecd fbagecd deabg gaedbc fgbdae ec adbce aecg ebfcdg | ec gcea ced ec
dg efbcgd cfdbaeg cfdga adeg bagcfe caefgd gdf feacg cdfab | gaedcbf abcfd dg dfegca
fdgbe gbc egfcdb cbdeg dcbf ecgad bc gcbafe beadfg bgdface | bfcd bfdc gcebfda bc
gace gcefb cgdebf ac cfa fbeac fgcdeba ebafd bagcdf gfacbe | ac feacdgb bcfea gafbdce
fcbega dfgcab gacbedf fgeca cbeg gc fegdba gac ecfda egabf | cbge ebgc gdebacf gc
cbga bdceaf bgfdec ba efgab aeb efcbga gdaef egbcf abgcdef | bacfde cgafbe dbcgaef fcgebda
fdcba bgfcd fdbaecg fcgaeb cegd bfgdae dgefb dfcgeb gc gbc | degc cgb cegd gdbaefc
caedgf bge dacbg be dbfecag cgbefa eagfc ebaf ecbag fdcbeg | beg eb agceb egfdac
dacgbef gebdfa bdcfga cgd adfgec cd cdba cdfbg ebcgf fdgab | defcga bcda acbd bgefc
fdgac cebf baedc dceaf adfcbe bfedga edgcba fe fed edabfgc | adcfg dagefbc egbcda fdceba
dagfbc fceabd fgbc edbcafg bdf bf bdgae afgcd fbdga gaefdc | gdcbfa bf bf fbcg
dgfcb abdfe fgadbc cfbgae gadfb afg cdgbefa cagd fcgdbe ag | gaf dabegfc fadgb ebacdfg
gbedc faced dfb fbegadc fcdbe fcdgab bf bdafce beaf edfacg | bf fb bf dfb
aegcfb dacgbfe fc ebcag acgebd acef cfbag cgf cbedfg fagdb | acgeb cbega bfdcgea debfgac
dgcfabe bgad eab agedc befcg cbaegd cefabd gaecb dceagf ab | bagd agdfce bea ba
fgbde fgba efb bf fcdgae afdeg afbecd becgd efdcbga dfegab | bgaf fb bf gefad
fb acgefb egafd baf adefb dcageb bdafce aefgdcb decab cbdf | dfcb afb fb begfadc
edcaf dgabfe ceb bgdc cb gaefcb fdgceb ecdfgba begdf bdcfe | cb gfdceab dbcfe bc
gedfcba bcdaeg dgae gca gdcbe afbdgc gfdcbe agcbe eafcb ag | gcbeafd agc bdegafc daebcg
aebcfg fagdc fcgea fgdebca ecabf ge feg bcge fgadeb cdebaf | fgeca ecgb eg gcafedb
aegcf becgdaf cbfag bafcd gcb cfgbde abdfce acdgfb bg dgba | egfcabd gb abdg gfcae
egcab adfegb gc febgac dbcea fgce bgafcde cdgbaf fbgea cgb | fgce bgc gc cg
cabfe dfa agdec df aecdfb cfbadg fagceb befd cfade dbaefgc | bcfgad faebcg df df
gcab fbeadcg badcf ag fgaced gfabdc dgbfa fag bgfed afdbec | fabcd cdbfgea cgefdba gaf
ae bdefac dacbf ecabd afdecgb feacbg eba aedf bcgde dfgcab | bae edaf ae ea
fdgba bdgeca cgb fdgec gbcadef dgabef bcagdf bc fbac gbcfd | cbg bc cfbgd dfcagb
afdgbce geac egfdca acbedf fgdce faced eg efg dgbaef bdcgf | dcfbeag afbegcd ge cega
daf fdaeb df dbfg dbeca egfab cegabf cfeadg cbdaefg dfbaeg | fda agfbe dfgb afd
gdcabe bfc dgbefca fc aebgc dcabfe efbgac fbcga agbfd efgc | bacdeg bfc cf bcgdeaf
cf fgdbe deacfg dbcea efdcb bfcg fdebcg fdc befdag gebdfca | cf cgbf fdegabc defbgac
gdfba fceadg cb fbcgd cgeb cdefg cdb bdfcae fgdcbe gbedfca | dbc cb fgbdc dfcagbe
dbgcaef dbfc eafgb fd dgbaec bcdag daf dfcaeg bdgfa bfcagd | adf fd df cdaefg
cd cfedb cgadebf efbgc abdfec edfab cadefg abcd dcf gbeadf | dc debcf fdc fbagcde
cgdfbae fe gecfd defb adcgeb caefgb fge dcgeb cgedfb cdfga | fe fge befgac fedb
egadb bdfge gcebdf ga cfdgabe edabc gdfa beafgd abg bacgef | fdga fbcdeg fedagbc bag
gbdea bfaeg fba gabcdf gadbec bf dbef egabdfc cfeag dfbgea | fb bacegfd dfeb bf
ebdac becfda bd bedfga edgcafb bed aecdg ebafcg dbcf abfec | cdfeab dbe cdfb ecabfd
gfbac dcage dfgace abgfed fgcdaeb fd agcebd defc gafdc gdf | ebdagfc gdf cdef dfg
bcfdeg dgceaf cea fecgb cbafe ea geab adcfb bdfgcae gcefab | egbcfa geba gdecaf caebf
gd agebc fgcd dbg fdgecb egfbda fbdgaec fcdeab bfdce bcdeg | caefdbg cagfebd debcfga cdgf
edc acged fcea ce dgecaf ebgdfc bcafgd fdcga acbgedf aegbd | gbfadce gbdefc ce afec
gfebd agbcfd acdbf caefdb abgefc gbfadce abe eacd ae dafeb | ae dbcfgea ea edac
aebcf dea gdacfe gfad adcgbfe caedf gbdeca ad dgcbef cfdeg | ade fdecga ad eda
eabgcd gdaeb faebgcd gaedf fdcbea efd ef efgb fgcad daefgb | gfbedac fecabgd fceabd dbfaec
cbeaf bafceg bfeg bcf bdcfag cdeaf fb edbcag bgeac cbgefad | abceg fb ebdafgc bf
ced aecgfdb fdecgb gcefa agde ed efdca abfcd begafc agdfce | gead bdacf abfdegc decfa
cda gdcaeb cadfe ebcagf cbefa dfabce gfdae cdfb cadgebf cd | dca cd bfdace aefdg
gacfbde bg degcaf gfbce aefgcb cbdef egcfa acgb bge gfaedb | cagebdf dfaegc ebgfac bagc
aefcd dfgea dfc cf fedcga cbdea adgefb adbgcf gecf gcbefad | cf dfagec fdc edfcbag
gefbd adgf eafdb gd gecfb fedgba bgd acbfde cdfageb adgbec | fbdgaec dg gdb aecbdfg
cdfabe cfga cg dcefa gce eagbd agced fcdeag gcefbd bdaefcg | gaedfc ecadgf gcfa dbega
dgcea cfgebda dagb fgcaed bcg bg bcaef cedabg bcaeg cegfdb | cgbade bfdecag aedgc gfcbdae
dbcfg cdfeg dbf befagc debfac agbd dgbcfa dbfgace db facgb | bd fbd bd bd
dbefga efcadb cgdab cdbfa gad fdcbgea gbaec dg fcdg acfdgb | dg dgcba fgcd dg
ebag gbafed fbdgac eb bdfag bef dfbge abegdcf fedcg acbdef | fgbade gabe edgbf fgcbdea
deg bcgfad efdagb fedagcb eg ebcg cdafe decfg dgcfb dfcbge | cdbgf cgfedba bcge eagbdf
egbdc efbgdc aec bagfecd eagcbd gbface ae adbe fadcg gcead | eac eca egbadc eac
acedb fdcgea degabf ebcafd eb fceb agdbfec deb cgbad feacd | eb edb agbcdef cdabe
gcdbfae eadb feacg ad dbcef dac bcedgf dbacgf cfdea bdafce | fdcbe dca fdebc caefg
edfba cedf cebad ecdfab decabgf acgbe cgabfd ebgdfa adc dc | cad adc baecdf efabd
caeg dbefg egdba afgbcd fbdcea cdgafeb ag agb bdecga adecb | ga gdaefbc ag dbeacg
bf bagdcf gbfa dgaecf gdfcb fdgbcae fdb bfcdea gcebd cdfga | febcda bagf fb fgba
cgbdef begfa agebd bdac da bgeacd ecdgb aed defacg cdbgfea | cbgdef da dbca ad
aebfdg aegbdcf cdebg ebgcdf ef cbef dgbcae gfe gfcda gfedc | gcdbe fge efcdgba fe
befad bcdf fce bgcaefd gaefdb dacfe cbefag gaecd caefbd cf | fce fc fdbc fc
gecab gfeca eafdbcg bgcdae fdcgeb gbc dceafb gb dabg abedc | agbd gafce gcaeb cdbgea
deabf dfg fcedgba bfgc fg cbdeag fedcga fbcadg cbgda afdbg | gbcf bgcad gdbca cgfb
bcafgd gefba acg abec decgf gbacef ca gafdbe cafeg bgecafd | afgec fgecdba gbadfc bgcadfe
febcgda ebga dgbecf efadbg ceafd eb edb bdgfac fbade fgabd | fdgba edb egab fdbga
dgb dbce faebcg bd gfbdac fecgb gbfcade bdgef bgfdce edgaf | bd db dbg bcdgefa
fdaeg afebgc dcf gcafbed cbfge dc dbcg bcfegd cbdefa edgcf | bcafge bagcfe agedf bgdc
cgfb bacgdfe bdfeg fdebcg cb cdb edgfab edfca becdf gebacd | cdefb acdegb bc afdbeg
gbdcaf gfbad gfdabce abfdce debagf gcfad ac gfced fca agbc | fca agcb egfdab gdcabf
cedbagf edagc bge bcdge gbad gb bgefac aecfgd bdfec cegdba | gbefadc febgadc ebg cagde
dfecga cdagbfe aegcd cdfg fegab bcfaed egafc cbegda fc fac | cdfg gdfbcae caf fc
gecdf agdfe dga cfda cegbda bafeg ad caefgd dfagceb bfgdec | dag gefdca cdfbgea afbgdec
deabf gdea bcaedf agdfeb dfg gd dcfabeg ecfbg edbfg bgdfac | gdf ecfgabd badgfc fgd
gfabc gafce adeg bgdfce dabgefc eacdfg ea dfcge ebcafd afe | agcedf fcgedb fcdaeb becgfd
dcbgeaf dbafec cafde beagdc gd dafg cfbge dge fegcda fgedc | dagf dgefc gd agdf
egcbdf dafe dfbge adbgefc eadbg egabc gcfdba abgedf dba ad | begdf efabcgd eafd edaf
cegd bcfde gfbcdea efdab dbcfg cef efbcdg ce abcfgd aecfbg | bedfc bfeda egcd dbefa
abdceg acedg efbcg ab bcad gcabe bdfage afdgce agebdcf gba | gadbcfe gbeac bdgeacf fbgec
dfba fcebad afgebc dbcea fcgdaeb befcd ebf gcdef fb eabgdc | bf efb bef agbfec
cfgde geadb fgdbec gfcb fbd bcfade egdbf adcefg bedcagf bf | bf fcbg bdf gdcefba
edf fgdbce agcfbe efbdga dafge beda de cbgfeda cdagf gafbe | ed gfead fed gcafd
ebdg fcbedg cdbagf de fbedca fecag daegfcb cbgfd cedfg dec | fbedcg cde ecd bgefacd
fbecgd gefca bcefa fgbeda deabgcf gc adgef cgad gfc gcefad | gc gc cfdega fcg
cgefab afb abgfde gadfcbe fbgced dcbga fa gebdf gfbda efad | cegbfa fbegda edgbf baf
dcbfg adce cegbd ed egcdbfa befagd bgace bcfaeg bdacge egd | fgdbeac geabdc begcadf acgefbd
ebgfac dabcfe fea bdafcg ea defbg aecg fcagb cafebgd abfge | gcfab gbfea afe efa
fdb beadfc decgb fd acdf dafbegc cfbed fcbaeg cabfe agfbde | fdb dcegb eabcf efcgdba
cbad dae dcbge feabg da gcbdef gaedb dbcegaf edagbc dgecfa | ade ade da adcb
fbe dcbefg fe adfbce gebdacf fbadcg baceg bdacf fead fceab | debfgc ef ef bcaeg
ab cbgdfae cbdagf dceabg ebad bag gdbce edfbcg cefga ebcag | dabe ba fagdebc gcbde
cdagbf fcadbe gac acgbd bgcde cgbafe eabgcfd ga adgf cbafd | ag agfd adfg cbgafd
edca eagcfbd dbgae dge ed bgcad bdcfga fagbe gbcaed gebdfc | cead gde deg fcdgbe
edb abfgecd edgf fgaeb bdage cadgb fdcbea de fbedga abfceg | eadfcb bedgcfa bed dbe
faedgbc cfebad dbecf afeb ab afdcg dba adbfc aedgcb ebfcgd | dab fcgad dbgefca dcfga
aedc dagbcf afbdce gfbed cd efbac acefgb dcefgba cfebd dcf | fbcagde eadbfcg cd bedfg
agedbc egdcb eb bgea bedfac dbgca cgfde edgabfc cbe dbfcga | ecdgb fdcge bega dfebca
dfbeac gcdefa cf fbcea ebadf efc gdfaeb abgce ebfcdag fdcb | ecf bgeac fc fcbd
gacdef dbeaf dgaefb fc dcafgeb ebcdfa gbecd bcdfe cdf abfc | cdf fdc egfbdca cf
ecfdba be bgce fcedag abdfg gbfed acgdfbe cefdbg cefgd dbe | deb be dfbag cgeb
bfgac acbfgd fga dgbca gbaefd efgcb cdefbga dgeacb af fdca | fadcebg fa adfgbec fa
dbgeac gd decg dabegfc dbeacf eadcb fdbega adgbc gbfac dbg | cdeg dabgc ecdba agcdbe
daebg ecgfd cbfeadg eabf degcba fgbdca afg gfaedb gfaed af | dcabge baef agf feab
edcgab dfcbage bfga becgfa gca efdca gfbdec ga becgf fecga | ebagcf gfba bgaf ebfcgd
bdfeag dcbfeag eg cdge afbec gea ecgaf fgadbc fcgeda fgdac | eg eagfc cdeg egcd
gdbeacf dfcgba ebafd ag bgaecf bcfgd afg gdafb bedgfc dacg | dgac gdca gfa gefbca
afbedc bfd gdbce bedafg gdfeb bf eacbfgd gefad agdefc bgaf | feagd bafdge fbag bdcafe
cae becgad gdabe ac cagb cgafde ebdac fcbde abcdfge degbaf | dbefga adcbge dgfeba fegbdac
caedb adb ecfgdab gdaec gbdeca ab cgdefa fgdcab dcbef eagb | gfaedc ba ba bcgafd
dcefa gcd agdfc bgeadc dg fgceabd dfgaec dfeg gbcaf dbfeac | bcgead fgacebd gcbaed bagcf
adbgce cd cdeg adc bcedgaf fbeac bdace ebdga afbged cbdagf | dac gedc cda dc
ad dfbce cdabf fgbca edbcga fead ebdgcaf bgfedc dac bcfade | eafd ad fgcab fbaecd
bfgdae baegf cbfeagd ebdaf fedca dabg dbe efbcgd db abgfec | bdfeag egbaf db gbda
gcfea eafdb eabgcfd egafb gadfeb gb fdgb bdafec ebg egabdc | decabf acdgfbe dbfg bfgd
gebaf cedgbf acbeg cbagdfe fbe acbf gaefd gcbdae fb gecfba | agfdceb bf bfca acbf
cegabfd fc gaefbd cbdea fadec fecg afc gecadf cbgdaf dgefa | cfbgda fac dfeca abgdcef
ab gdfea egba afegdc fdbae cfedb bad aefdbcg dgfcab egdbaf | facgdb abfedgc ab ba
af fgbeadc ceadg cfeagb fgdbae efa egfad efgdb fdab begdfc | dbfeg fa af bafd
dfgecb cgabf cdaefbg adbcge dabeg bec ec aecbg febdag aced | aebgfcd fgedba aedcgb adecbgf
bcadef cbfgd dcagbf dfe febg befcgd degfc degac bfagced fe | fde efdbgca gcbfdae fgbe
fgd edfc fgedca gafdebc febga agedf eadcg gdebca dacbfg df | cdef dgeca bdcfga efdc
aedcfbg dfceba eb caegdb begca fbacg bea egdb ecagd dgcafe | eba gdeac abe bgde
cg fcdg deacbgf cdgbaf fbcea abfgd gac badceg facgb dbfage | dfcg fabedg gc cgebda
bdgae eg defba gcedab bgadc dbfcag egbc ged gafcde cfbagde | geafbdc bfead ged bgead
agefc cgdef cgfdea ca fcdabg fecdgba aedc bgfae fac dgcbfe | fgecd agefc gafdec ceafg
ca cagbfd efbdc fac afecd aebc cadbef gfaedbc dbgefc feagd | ac dfgcabe defbc cdafbg
cdb ecfab gbcaed cafdg gbfd db adbcf cdagef afgcdb cfdebga | db bcdgae dbc db
begfcd ag cgaebf gfbcdea bdgeaf gead bgadf agf fdgeb acdbf | gfbad ag fadcb ga
ad gbced dab bcfage adbge afegb fcagdeb fbdaeg dagf acbdfe | fadcgeb bedga gdfa gdbeaf
begfdc fgdcb fgadbe caebg cagfdb efg edcf ebcgf ef efbdgca | degafb gef fagbcd feg
ecfdg gfbed gdac acgbfe cdafe bafdgce gec dfecga cg afcdbe | cg gc abcdfge ceg
deabg gea egdfcab bgcda gbfe fdbgae efcdag fadbe eg efadcb | gafbcde ega gfeb dfgbcae
ef gecadb adbeg defbg fcbgd fgae feb efgabd bedfca facbdeg | efb bef ef agef
cefga cfd fcebdg ceagbd bfdg bfdeac gcbde gfdce agcdfbe fd | faedgcb fdc dcgfbe cdf
dfce cgbfa gbadef df bfd gaecdb ebdgcf cgbde gdcfb acgbdef | fbd fd cgfba fdb
dca da bdfgc cadbef ebfacdg eadb bfeac fdcgae bfcad fgecab | adeb abcfegd gbfcea ad
gcedaf gfdecb gb caefg cebga fgacbe fabg dcabe agbfced bcg | agfb begca dcgeabf bg
dbgac cdf fagde fedbacg fgdabc acdbge dfgca ecafdb gcbf fc | bcgf cfbg ebgcdaf bdagc
ed fedag dge gceaf dfabg dcfe afdegcb aebfgc dgbaec dagecf | acgefb de afdeg gcdeba
dca fcbdg fgecab ad adbcg debfgca ecbdag gceba facged edab | acefgb ad gfebdca fcdaegb
edaf gfeab ebfgda dfbga dacgb gfbceda bgeacf df gfd bcdgfe | df fdg aegfdb feabg
bcfagde dgabfc beafc geca fgcaeb fdbec ac fca gabfe gfdaeb | gcfbead fca gebfa caf
aecbg cfeagd cadfbe dgceb cgfae edacfgb fecbag ba abc gfba | ab bca bca fbag
bdc aebgc db cdgef dagb geabcf ebgacd gdebc aedcbf gadfbce | befacdg abgced dbc bdceg
egbacfd dabgfc beagfd ef dbef dgbaf fge gcfade cgbea eafbg | dgcafe befd feg fedb
faebd cbdaf edfgab fdcbeg dfgbe ae dagfce bedgafc ead beag | dea ae abcdfge fgedbac
gfabd fagcde cdbefa gaebdf ecfdbga gaefd fab aebg cgbfd ab | ebga fdbeagc fba gadfec
bfa cfga acbfe edcfbga fa fagebd bdcfe aecfgb ebdacg geacb | gfca bgace gafceb gcaf
dgbae dcfegb bgdfc fagbcd gca dafc ca dabgfce cgbda agbecf | cafd ac cag cga
fcag egdca gc agedb cgd adefc bcfged cbefad egcfad efcagdb | cg dcg cgd cgd
ea fdeacb eab bgdefc adgcefb bfdga face cbdfe bedaf dcgaeb | gcbfdae ecdgbfa bea bae
acbe ecd feacdb ec egafd eadcf cbdaf fgcdba cfbagde efcbgd | dgcabfe ce bgfedc egdbfac
cdageb badf gbfcad fcgab fgadebc gecfd bd eacfbg dbg bgfcd | febcdag bd fadb fdba
adgcbef bef cgedba fbecag efbca baegc bf gcdbfe bfga acefd | agfb bgfa gbaf bef
bcfade agcde acd edcbg feagcd gdaf dbeacgf ad eafcgb fcega | cad gdcefab dgaf ebdgfca
df abfce degbc cfd acgfed gbdf bacfegd efdcb badceg egfcbd | cebgd bgdf bceaf df
bfdc eabdf ebcad fgead bcdeag fba bf bcedgfa cdebfa bcegaf | defba cfbd bdcf fabceg
dbaefcg ec aec dfgbea cafeg aedcbg gacedf egadf gfcba cfde | eac efcd ec egcfda
ecgfdab gcefb bcfa af cgfdbe aegbf ebadg eacgfd gbecaf afg | aedbg bafc acfb dgfbace
    ")
}

pub fn parse_height_map(s: &str) -> Vec<Vec<u8>> {
    let mut rows = Vec::new();
    parse_input(s, |parts| {
        rows.push(parts[0].chars()
            .map(|c| c.to_string().parse::<u8>().unwrap())
            .collect());
    });
    rows
}

pub fn get_height_map() -> Vec<Vec<u8>> {
    parse_height_map(r"
9876567896542101249889965434567898765698785435678989898897654789424901245699887678932398943999888667
5995456976543294398767896223456789654988654523599976677789765678919893456989776587891987899898765456
6976577897664989985458989012345678969876543212388965435678996789909789579876543456789996789789894347
7988678989979876564344678923576789989997432101267896323499989898898678999998432345899985345678932123
8998789867891998432123799939678999899976543243458986545689869987674567989987543467899874257899653999
9999898756890986573334987898989989789987654367867897656799878998543459876797665678901965346789869878
9899999646789987654579876567898775679998965489989998767899989019651279765798786989219875457896998767
8789798756789298777689987679987654598999996797597899878999999198762998754569987895423996567934987656
6679659987894399888798998989876543497899987965456953989998998999879896543456998976534597789759876547
5589943198965989999897899492998612986789998954349892199987687889998794332346799989645679898967965431
3469894239899876543956789321299101975679989421298789098996545678987653201236789899898789987899876672
2345789345798765432346695490985423986789879910197678987987657899998543212345897679929899896989987983
1234689956789854301234579989976639897897567891997569896599868998987654324596896578910998745878998754
2345789897892969219345989879897798789995456879875456789476979997699865537788912345921987634569898765
6456898798901298998996898768789987656789345967965345799324989896549876745689302399899876547679769876
7587897689432987887989997657567894345693233459874234678912398765434998656793212989678987756789643987
8798976568999876776577896543479965456789102398762123489323489886755789767894349876598998767896542398
9899435456987985325456789632568997697898912987542012395434678987867899878995998765456789878984321459
0987321249876543101267896521456789789967894599653423569545989999878999989789854321239899989876532967
1965433968987653274378976410367899996456789698769545678956799896989998795698765430198999898998649798
9876549899899985365467995321278998975345698999978996789967998785599987654569896542987898767989798689
6998659789789876476567896793345897683234567899999987897898998654359876543756987669896797659878987543
5109898654677986587678987854456789432126788999876798956799987543298765432345798798765896738769996432
4315986543456997678989998999967896569335999998765329545689499856988664321234569899896954323657987571
5423498642347899789496889987898987698946789999854101234599398767976543210145778954987893212345898430
5439987656456789892345678966989998987956797898943212345678939878987854321236899892198962101236789321
7998798798987899921234568945679899876897976987657723876789548989298975432445689789299753213445678932
9886649899198988430345678936799786765689765698876545687899956994349996547556895678987654567576789545
8765434989019876521234569647987654554599654769987656998989899865456987698667894689598765678689997696
9976765678929998432349678956987833223498943459899789899876799976967898789788923499439878999793239987
9897878789997987653658989769876521014587894598769898776655689989898989899899312678921999999890145698
8798989899876598967967899889987432123456789998655949654234678998789879902954201259890987898921236799
7689994939875439879878925995698544536568999897543239862124559897674567893965354345679896567892357892
4567943129876623989989213989987656697879998795432124983012346789543456999878465456798765456789469921
3459321098765012399992101978798777788989989689321013964323456797652345999986577567987654343459567890
2398939987654123689764219865669998999599876579544329865434567968531237889499787679898763212378978921
9497898999953234569765439754358999886498768478995449876545678954320145679329898799769894324567899652
8976867898764345678996598767467898765349954265689656987787889765621234569210989987657975434678996543
7654656789876656899789679898978987643299863134598767898898999875432349878929876976549876545789989656
6543445678989778956678989939989498656987654249699878989929986976543456789998665989434987656899879767
7651534567899899434579998545695349897898975398988989878212965987757567899987554599321399767948768998
8710123458989910125678997656789232998969876987767899966109854398869678988995463498442459878932356799
9321234667965431249989798767992101239654989876456789954398743239989899767896332987643467989201345689
5432345678976542458995679898943356896543298765334567895987652159899998456889101298776578993212456789
6597656789987843567894623999764877987654697654123456789298789018789997349778922999887789989999597890
7679787894599756778943219989885989598969798743034568994398732124679876234567939899998999678878998921
8789898923987967889994398879996795459998999842126678985459543435678965445678998798999987567567899932
9893969219876598997889986768998954356987899763234589876768954747899876789789998697989876423479927893
7932356929854329545678965657889653235696598654345678989879865656789987899899986545877988765589436789
6541467899773210124567894545678932123798429785456799393989876769893198999999876623456899887896545895
5432379987654432396779943234799543234987439896567893212394987899979999098789985212346799998997657994
7654567898878643989998954545988954345976545987678954493913598998769892197679654303457897659398778989
8769879999997654976867995659877899457898656798789895989897679989654793986598765412598986543239889678
9878998998898769865456789798765678967899769899896799879789789979543679995439874323459995432123996567
7989997896799898765347899899854569998989878998965988964569899865432568954321986445578989932019765456
6497986725788987653234567945965789889965989987654567953478921984321467899439797569789677892198654345
5345975414667898784123489939876998767894395698753457892345890997632345678997698978993566789249985656
4239864303458999894234567892999899656910234989884878921456789896543456799986569989432345698956976798
3199878212367898765645678901988789945991299878976789530345698789654867899875456599531234987899897899
4289989343478999976789789899876567899889989656987897321234799678965798999654323478920134986798799954
5678999656789799987899995767998345789767678967998976532367987579877899998975634567921299875532678995
6989998767895678998999864545695456897654589898959897745459995459989999897996796778932989984321556889
9899899878984569019998753434976568933743456789345679856599989398999989796789989899749878975410345678
8798789989573498929987642123988989421012345891234567967987673267899875685889878998659867896541236789
4685678997431567898998543234599895434999496910126779878998432156999764534678967989898656789532345892
3434567986542459987987654456988789659878989321234569989109843245699843123599345678987745699546456943
2123456797656567896499766569877679998765678932457998997998764556789965654789234678976534678998567894
3234597899997698945349879698767567899654367893459897566899976778999877765692123567894323559898778965
4345798999889999431299989987656458999865458954598798445645987899989989876789012989963212346789889986
5477899998678898740989999898742347899876767895987654320136798989578997987894329898954433577894999897
6567999876545689659878998765431236789987899999898765631247899975459876598965498787895954589912398789
9878989987434567998767849897310135689298946789769987545698999767210986439878987676799867678923497679
9989678998523456987656234998421234793139435697654398656989987654329798323999776545789878789539987567
9694569876313456986543123499562376891098546789452239769878898976498643202987632124699989897698776466
8543456965424569997931012987654567942987657895321019898967679987679784419876543245678993919987654345
7432459876436678998765178998765678993498767987432123987843567898789876323987987656789892101298764257
6556795998545689209874357899876899789569978998693239876732598999898765435899398767897789912999865369
7867954297656789398765456976989965678979999109989346985321487899989876546789219978945679899899876459
8998969199887895459876587895697654567898989235979997976210356789767998769894349989234598788789989678
9549998989998979567989698914598543456987678949868789997921234899854319898965998799015987675679898989
5434987879999767989999789323987632369876567998659699989892347999995423997999897678929876564798797890
6565976765789658999989899939876521379765476896543569876789456789989599886789764567899975433459656891
8679765554567967898968979899985435498654345789432498765689567994678987765989953456989876321298967892
9998654443456898987956758789876657987421235679321989654699778976989876564567892349876543210987898943
9877843312345789876541245696987789876530123789432979795699899987898765433548953478988664329876789654
8765432103556898765720476795498898987545434599999868989789954698999654321238954567899965498765678967
9876556314587899654321297954349967898687567899889747678999643999999876534567896898999876999874789878
6987787323458998965432379965212456789798678998777634567898759789989987845678997899789999894323699989
5598898954569987897763567899101345679899789997664523467969898698678998756989998955567987643214569999
4459999767698876999654578998932956789929899876543212348954989543559899967899989643456798752101478989
3358999878987855798965689987999897993210998987654101247899878942345789878998765432017986543212399976
2256789989876544687899899876789789894321987598785613345678967921456789989999976543128987664343457895
1034598795987432356789998965645698795452399439896723456789456892967895698789897669239898765674688934
2129889643498321768899987854134987689943998921987854578891256799898934987676789778349769876989799423
5345679791987542379998996543029876567899877892398987689932345689789329876565679889498959987899898912
7956789989998673498987987632198765456789766799459998996543867795679499965434798999987898898942967923
8987999878998794567896496544349896777895445678967899329654989894898987654323456789876987769321259894
9499998767899895678954349876456997889954334589979997598767894943767899865410387899985396543210345789
5323987756789987989765212989567898996563125678989987679878943432356789876521239999876987654421256895
6212976545678998999986433497678999765431016789990198789989432101245678989432445689989998765632867934
    ")
}